
first_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028fc  080028fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080028fc  080028fc  000128fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002904  08002904  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002904  08002904  00012904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002908  08002908  00012908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800290c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00003fd0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003fe0  20003fe0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007a4d  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a52  00000000  00000000  00027ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000858  00000000  00000000  00029528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000633  00000000  00000000  00029d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020686  00000000  00000000  0002a3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000922d  00000000  00000000  0004aa39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c79db  00000000  00000000  00053c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002018  00000000  00000000  0011b644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0011d65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002874 	.word	0x08002874

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08002874 	.word	0x08002874

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80004dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	4a06      	ldr	r2, [pc, #24]	; (80004fc <vApplicationGetIdleTaskMemory+0x30>)
 80004e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	2000002c 	.word	0x2000002c
 80004fc:	20000080 	.word	0x20000080

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b08e      	sub	sp, #56	; 0x38
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 f99f 	bl	8000848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f853 	bl	80005b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;//enabling clock
 800050e:	4b22      	ldr	r3, [pc, #136]	; (8000598 <main+0x98>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a21      	ldr	r2, [pc, #132]	; (8000598 <main+0x98>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;//enabling clock
 800051a:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <main+0x98>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <main+0x98>)
 8000520:	f043 0310 	orr.w	r3, r3, #16
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOA->MODER |= GPIO_MODER_MODE6_0; //УРААААА!!!!! АЛЕ М�? ЙОМУ НІЧО НЕ ПОДАЄМ
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <main+0x9c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a1c      	ldr	r2, [pc, #112]	; (800059c <main+0x9c>)
 800052c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000530:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE7_0;
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <main+0x9c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a19      	ldr	r2, [pc, #100]	; (800059c <main+0x9c>)
 8000538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053c:	6013      	str	r3, [r2, #0]
  GPIOE->PUPDR |= GPIO_PUPDR_PUPD4_0 | GPIO_PUPDR_PUPD3_0;
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <main+0xa0>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <main+0xa0>)
 8000544:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8000548:	60d3      	str	r3, [r2, #12]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of K0_TaskHandler */
  osThreadDef(K0_TaskHandler, K0_ButtonTask, osPriorityNormal, 0, 128);
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <main+0xa4>)
 800054c:	f107 041c 	add.w	r4, r7, #28
 8000550:	461d      	mov	r5, r3
 8000552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  K0_TaskHandlerHandle = osThreadCreate(osThread(K0_TaskHandler), NULL);
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f000 ff0a 	bl	800137e <osThreadCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <main+0xa8>)
 800056e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(K1_TaskHandler, K1_ButtonTask, osPriorityNormal, 0, 128);
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <main+0xac>)
 8000572:	463c      	mov	r4, r7
 8000574:	461d      	mov	r5, r3
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  K1_TaskHandlerHandle = osThreadCreate(osThread(K1_TaskHandler), NULL);
 8000582:	463b      	mov	r3, r7
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fef9 	bl	800137e <osThreadCreate>
 800058c:	4603      	mov	r3, r0
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <main+0xb0>)
 8000590:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000592:	f000 feed 	bl	8001370 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000596:	e7fe      	b.n	8000596 <main+0x96>
 8000598:	40023800 	.word	0x40023800
 800059c:	40020000 	.word	0x40020000
 80005a0:	40021000 	.word	0x40021000
 80005a4:	0800289c 	.word	0x0800289c
 80005a8:	20000280 	.word	0x20000280
 80005ac:	080028c8 	.word	0x080028c8
 80005b0:	20000284 	.word	0x20000284

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 f92a 	bl	800281c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a27      	ldr	r2, [pc, #156]	; (8000680 <SystemClock_Config+0xcc>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <SystemClock_Config+0xd0>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2310      	movs	r3, #16
 800061a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000620:	2300      	movs	r3, #0
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000624:	2308      	movs	r3, #8
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000628:	23a8      	movs	r3, #168	; 0xa8
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fa5d 	bl	8000af8 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000644:	f000 f86e 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000654:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2105      	movs	r1, #5
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fcbe 	bl	8000fe8 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000672:	f000 f857 	bl	8000724 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <K1_ButtonTask>:

/* USER CODE BEGIN 4 */
void K1_ButtonTask(void const * argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		//Button K1
		if ( (~(GPIOE->IDR) & GPIO_IDR_ID3) ) {
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <K1_ButtonTask+0x38>)
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	f003 0308 	and.w	r3, r3, #8
 8000698:	2b00      	cmp	r3, #0
 800069a:	d106      	bne.n	80006aa <K1_ButtonTask+0x22>
			GPIOA->BSRR |= GPIO_BSRR_BR7;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <K1_ButtonTask+0x3c>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <K1_ButtonTask+0x3c>)
 80006a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	e005      	b.n	80006b6 <K1_ButtonTask+0x2e>
		} else {
			GPIOA->BSRR |= GPIO_BSRR_BS7;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <K1_ButtonTask+0x3c>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <K1_ButtonTask+0x3c>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	6193      	str	r3, [r2, #24]
		}
		osDelay(10);
 80006b6:	200a      	movs	r0, #10
 80006b8:	f000 fead 	bl	8001416 <osDelay>
		if ( (~(GPIOE->IDR) & GPIO_IDR_ID3) ) {
 80006bc:	e7e8      	b.n	8000690 <K1_ButtonTask+0x8>
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40020000 	.word	0x40020000

080006c8 <K0_ButtonTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_K0_ButtonTask */
void K0_ButtonTask(void const * argument)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //Button K1
	  if ( (~(GPIOE->IDR) & GPIO_IDR_ID4) ) {
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <K0_ButtonTask+0x54>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	f003 0310 	and.w	r3, r3, #16
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d114      	bne.n	8000706 <K0_ButtonTask+0x3e>
		  GPIOA->BSRR |= GPIO_BSRR_BR6;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <K0_ButtonTask+0x58>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <K0_ButtonTask+0x58>)
 80006e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006e6:	6193      	str	r3, [r2, #24]
		  osDelay(1000);
 80006e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ec:	f000 fe93 	bl	8001416 <osDelay>
		  GPIOA->BSRR |= GPIO_BSRR_BS6;
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <K0_ButtonTask+0x58>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <K0_ButtonTask+0x58>)
 80006f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006fa:	6193      	str	r3, [r2, #24]
		  osDelay(1000);
 80006fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000700:	f000 fe89 	bl	8001416 <osDelay>
 8000704:	e005      	b.n	8000712 <K0_ButtonTask+0x4a>
	  } else {
		  GPIOA->BSRR |= GPIO_BSRR_BS6;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <K0_ButtonTask+0x58>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <K0_ButtonTask+0x58>)
 800070c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000710:	6193      	str	r3, [r2, #24]
	  }
	  osDelay(10);
 8000712:	200a      	movs	r0, #10
 8000714:	f000 fe7f 	bl	8001416 <osDelay>
	  if ( (~(GPIOE->IDR) & GPIO_IDR_ID4) ) {
 8000718:	e7da      	b.n	80006d0 <K0_ButtonTask+0x8>
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000
 8000720:	40020000 	.word	0x40020000

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_MspInit+0x54>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	4a11      	ldr	r2, [pc, #68]	; (8000784 <HAL_MspInit+0x54>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000744:	6453      	str	r3, [r2, #68]	; 0x44
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x54>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <HAL_MspInit+0x54>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <HAL_MspInit+0x54>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	6413      	str	r3, [r2, #64]	; 0x40
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_MspInit+0x54>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	210f      	movs	r1, #15
 8000772:	f06f 0001 	mvn.w	r0, #1
 8000776:	f000 f996 	bl	8000aa6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler+0x4>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f898 	bl	80008ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007bc:	f001 fbae 	bl	8001f1c <xTaskGetSchedulerState>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d001      	beq.n	80007ca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007c6:	f001 fdef 	bl	80023a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <SystemInit+0x20>)
 80007d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <SystemInit+0x20>)
 80007dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800082c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007fa:	490e      	ldr	r1, [pc, #56]	; (8000834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000810:	4c0b      	ldr	r4, [pc, #44]	; (8000840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800081e:	f7ff ffd7 	bl	80007d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000822:	f002 f803 	bl	800282c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000826:	f7ff fe6b 	bl	8000500 <main>
  bx  lr    
 800082a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800082c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000838:	0800290c 	.word	0x0800290c
  ldr r2, =_sbss
 800083c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000840:	20003fe0 	.word	0x20003fe0

08000844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC_IRQHandler>
	...

08000848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_Init+0x40>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <HAL_Init+0x40>)
 8000852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_Init+0x40>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_Init+0x40>)
 800085e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_Init+0x40>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a07      	ldr	r2, [pc, #28]	; (8000888 <HAL_Init+0x40>)
 800086a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000870:	2003      	movs	r0, #3
 8000872:	f000 f90d 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000876:	200f      	movs	r0, #15
 8000878:	f000 f808 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087c:	f7ff ff58 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023c00 	.word	0x40023c00

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_InitTick+0x54>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_InitTick+0x58>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f917 	bl	8000ade <HAL_SYSTICK_Config>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00e      	b.n	80008d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d80a      	bhi.n	80008d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f000 f8ed 	bl	8000aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <HAL_InitTick+0x5c>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000004 	.word	0x20000004

080008ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x20>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_IncTick+0x24>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_IncTick+0x24>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000008 	.word	0x20000008
 8000910:	20000288 	.word	0x20000288

08000914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <HAL_GetTick+0x14>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000288 	.word	0x20000288

0800092c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095e:	4a04      	ldr	r2, [pc, #16]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	60d3      	str	r3, [r2, #12]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	490c      	ldr	r1, [pc, #48]	; (80009dc <__NVIC_SetPriority+0x4c>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4908      	ldr	r1, [pc, #32]	; (80009e0 <__NVIC_SetPriority+0x50>)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	3b04      	subs	r3, #4
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43da      	mvns	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43d9      	mvns	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	4313      	orrs	r3, r2
         );
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3724      	adds	r7, #36	; 0x24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a5c:	d301      	bcc.n	8000a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00f      	b.n	8000a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <SysTick_Config+0x40>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f7ff ff8e 	bl	8000990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SysTick_Config+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Config+0x40>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff47 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab8:	f7ff ff5c 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	6978      	ldr	r0, [r7, #20]
 8000ac4:	f7ff ff8e 	bl	80009e4 <NVIC_EncodePriority>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff5d 	bl	8000990 <__NVIC_SetPriority>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffb0 	bl	8000a4c <SysTick_Config>
 8000aec:	4603      	mov	r3, r0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e267      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d075      	beq.n	8000c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b16:	4b88      	ldr	r3, [pc, #544]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f003 030c 	and.w	r3, r3, #12
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d00c      	beq.n	8000b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b22:	4b85      	ldr	r3, [pc, #532]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	d112      	bne.n	8000b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b2e:	4b82      	ldr	r3, [pc, #520]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b3a:	d10b      	bne.n	8000b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d05b      	beq.n	8000c00 <HAL_RCC_OscConfig+0x108>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d157      	bne.n	8000c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e242      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b5c:	d106      	bne.n	8000b6c <HAL_RCC_OscConfig+0x74>
 8000b5e:	4b76      	ldr	r3, [pc, #472]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a75      	ldr	r2, [pc, #468]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	e01d      	b.n	8000ba8 <HAL_RCC_OscConfig+0xb0>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b74:	d10c      	bne.n	8000b90 <HAL_RCC_OscConfig+0x98>
 8000b76:	4b70      	ldr	r3, [pc, #448]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a6f      	ldr	r2, [pc, #444]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	4b6d      	ldr	r3, [pc, #436]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a6c      	ldr	r2, [pc, #432]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	e00b      	b.n	8000ba8 <HAL_RCC_OscConfig+0xb0>
 8000b90:	4b69      	ldr	r3, [pc, #420]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a68      	ldr	r2, [pc, #416]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	4b66      	ldr	r3, [pc, #408]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a65      	ldr	r2, [pc, #404]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d013      	beq.n	8000bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb0:	f7ff feb0 	bl	8000914 <HAL_GetTick>
 8000bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb6:	e008      	b.n	8000bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb8:	f7ff feac 	bl	8000914 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b64      	cmp	r3, #100	; 0x64
 8000bc4:	d901      	bls.n	8000bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e207      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bca:	4b5b      	ldr	r3, [pc, #364]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f0      	beq.n	8000bb8 <HAL_RCC_OscConfig+0xc0>
 8000bd6:	e014      	b.n	8000c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd8:	f7ff fe9c 	bl	8000914 <HAL_GetTick>
 8000bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bde:	e008      	b.n	8000bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be0:	f7ff fe98 	bl	8000914 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	2b64      	cmp	r3, #100	; 0x64
 8000bec:	d901      	bls.n	8000bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e1f3      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf2:	4b51      	ldr	r3, [pc, #324]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1f0      	bne.n	8000be0 <HAL_RCC_OscConfig+0xe8>
 8000bfe:	e000      	b.n	8000c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d063      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c0e:	4b4a      	ldr	r3, [pc, #296]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f003 030c 	and.w	r3, r3, #12
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00b      	beq.n	8000c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c1a:	4b47      	ldr	r3, [pc, #284]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c22:	2b08      	cmp	r3, #8
 8000c24:	d11c      	bne.n	8000c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c26:	4b44      	ldr	r3, [pc, #272]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d116      	bne.n	8000c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c32:	4b41      	ldr	r3, [pc, #260]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d005      	beq.n	8000c4a <HAL_RCC_OscConfig+0x152>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d001      	beq.n	8000c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e1c7      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c4a:	4b3b      	ldr	r3, [pc, #236]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	4937      	ldr	r1, [pc, #220]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5e:	e03a      	b.n	8000cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d020      	beq.n	8000caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c68:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <HAL_RCC_OscConfig+0x244>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c6e:	f7ff fe51 	bl	8000914 <HAL_GetTick>
 8000c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c74:	e008      	b.n	8000c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c76:	f7ff fe4d 	bl	8000914 <HAL_GetTick>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d901      	bls.n	8000c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	e1a8      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d0f0      	beq.n	8000c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c94:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	691b      	ldr	r3, [r3, #16]
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	4925      	ldr	r1, [pc, #148]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	600b      	str	r3, [r1, #0]
 8000ca8:	e015      	b.n	8000cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000caa:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <HAL_RCC_OscConfig+0x244>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fe30 	bl	8000914 <HAL_GetTick>
 8000cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cb8:	f7ff fe2c 	bl	8000914 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e187      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f0      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d036      	beq.n	8000d50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d016      	beq.n	8000d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_RCC_OscConfig+0x248>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cf0:	f7ff fe10 	bl	8000914 <HAL_GetTick>
 8000cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cf6:	e008      	b.n	8000d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cf8:	f7ff fe0c 	bl	8000914 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e167      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_RCC_OscConfig+0x240>)
 8000d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0f0      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x200>
 8000d16:	e01b      	b.n	8000d50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_RCC_OscConfig+0x248>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d1e:	f7ff fdf9 	bl	8000914 <HAL_GetTick>
 8000d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d24:	e00e      	b.n	8000d44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d26:	f7ff fdf5 	bl	8000914 <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d907      	bls.n	8000d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e150      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	42470000 	.word	0x42470000
 8000d40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d44:	4b88      	ldr	r3, [pc, #544]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1ea      	bne.n	8000d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 8097 	beq.w	8000e8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d62:	4b81      	ldr	r3, [pc, #516]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10f      	bne.n	8000d8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	4b7d      	ldr	r3, [pc, #500]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a7c      	ldr	r2, [pc, #496]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b7a      	ldr	r3, [pc, #488]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d8e:	4b77      	ldr	r3, [pc, #476]	; (8000f6c <HAL_RCC_OscConfig+0x474>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d118      	bne.n	8000dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d9a:	4b74      	ldr	r3, [pc, #464]	; (8000f6c <HAL_RCC_OscConfig+0x474>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a73      	ldr	r2, [pc, #460]	; (8000f6c <HAL_RCC_OscConfig+0x474>)
 8000da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000da6:	f7ff fdb5 	bl	8000914 <HAL_GetTick>
 8000daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dac:	e008      	b.n	8000dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dae:	f7ff fdb1 	bl	8000914 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e10c      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc0:	4b6a      	ldr	r3, [pc, #424]	; (8000f6c <HAL_RCC_OscConfig+0x474>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f0      	beq.n	8000dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d106      	bne.n	8000de2 <HAL_RCC_OscConfig+0x2ea>
 8000dd4:	4b64      	ldr	r3, [pc, #400]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dd8:	4a63      	ldr	r2, [pc, #396]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6713      	str	r3, [r2, #112]	; 0x70
 8000de0:	e01c      	b.n	8000e1c <HAL_RCC_OscConfig+0x324>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	2b05      	cmp	r3, #5
 8000de8:	d10c      	bne.n	8000e04 <HAL_RCC_OscConfig+0x30c>
 8000dea:	4b5f      	ldr	r3, [pc, #380]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dee:	4a5e      	ldr	r2, [pc, #376]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	6713      	str	r3, [r2, #112]	; 0x70
 8000df6:	4b5c      	ldr	r3, [pc, #368]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dfa:	4a5b      	ldr	r2, [pc, #364]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6713      	str	r3, [r2, #112]	; 0x70
 8000e02:	e00b      	b.n	8000e1c <HAL_RCC_OscConfig+0x324>
 8000e04:	4b58      	ldr	r3, [pc, #352]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e08:	4a57      	ldr	r2, [pc, #348]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000e0a:	f023 0301 	bic.w	r3, r3, #1
 8000e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e10:	4b55      	ldr	r3, [pc, #340]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e14:	4a54      	ldr	r2, [pc, #336]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000e16:	f023 0304 	bic.w	r3, r3, #4
 8000e1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d015      	beq.n	8000e50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e24:	f7ff fd76 	bl	8000914 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e2a:	e00a      	b.n	8000e42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e2c:	f7ff fd72 	bl	8000914 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e0cb      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e42:	4b49      	ldr	r3, [pc, #292]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0ee      	beq.n	8000e2c <HAL_RCC_OscConfig+0x334>
 8000e4e:	e014      	b.n	8000e7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e50:	f7ff fd60 	bl	8000914 <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e56:	e00a      	b.n	8000e6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e58:	f7ff fd5c 	bl	8000914 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e0b5      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e6e:	4b3e      	ldr	r3, [pc, #248]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1ee      	bne.n	8000e58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d105      	bne.n	8000e8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e80:	4b39      	ldr	r3, [pc, #228]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	4a38      	ldr	r2, [pc, #224]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80a1 	beq.w	8000fd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e96:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d05c      	beq.n	8000f5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d141      	bne.n	8000f2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <HAL_RCC_OscConfig+0x478>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fd30 	bl	8000914 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eb8:	f7ff fd2c 	bl	8000914 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e087      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eca:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69da      	ldr	r2, [r3, #28]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	019b      	lsls	r3, r3, #6
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eec:	085b      	lsrs	r3, r3, #1
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	041b      	lsls	r3, r3, #16
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	061b      	lsls	r3, r3, #24
 8000efa:	491b      	ldr	r1, [pc, #108]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000efc:	4313      	orrs	r3, r2
 8000efe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <HAL_RCC_OscConfig+0x478>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fd05 	bl	8000914 <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f0e:	f7ff fd01 	bl	8000914 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e05c      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0f0      	beq.n	8000f0e <HAL_RCC_OscConfig+0x416>
 8000f2c:	e054      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <HAL_RCC_OscConfig+0x478>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fcee 	bl	8000914 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f3c:	f7ff fcea 	bl	8000914 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e045      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_RCC_OscConfig+0x470>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f0      	bne.n	8000f3c <HAL_RCC_OscConfig+0x444>
 8000f5a:	e03d      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d107      	bne.n	8000f74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e038      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40007000 	.word	0x40007000
 8000f70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_RCC_OscConfig+0x4ec>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d028      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d121      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d11a      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000faa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d111      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	085b      	lsrs	r3, r3, #1
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d107      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d001      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e0cc      	b.n	8001196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ffc:	4b68      	ldr	r3, [pc, #416]	; (80011a0 <HAL_RCC_ClockConfig+0x1b8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d90c      	bls.n	8001024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800100a:	4b65      	ldr	r3, [pc, #404]	; (80011a0 <HAL_RCC_ClockConfig+0x1b8>)
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001012:	4b63      	ldr	r3, [pc, #396]	; (80011a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d001      	beq.n	8001024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e0b8      	b.n	8001196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d020      	beq.n	8001072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800103c:	4b59      	ldr	r3, [pc, #356]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	4a58      	ldr	r2, [pc, #352]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001054:	4b53      	ldr	r3, [pc, #332]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4a52      	ldr	r2, [pc, #328]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 800105a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800105e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001060:	4b50      	ldr	r3, [pc, #320]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	494d      	ldr	r1, [pc, #308]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	4313      	orrs	r3, r2
 8001070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d044      	beq.n	8001108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d107      	bne.n	8001096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001086:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d119      	bne.n	80010c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e07f      	b.n	8001196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d003      	beq.n	80010a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d107      	bne.n	80010b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a6:	4b3f      	ldr	r3, [pc, #252]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d109      	bne.n	80010c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e06f      	b.n	8001196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b6:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e067      	b.n	8001196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010c6:	4b37      	ldr	r3, [pc, #220]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f023 0203 	bic.w	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4934      	ldr	r1, [pc, #208]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010d8:	f7ff fc1c 	bl	8000914 <HAL_GetTick>
 80010dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010de:	e00a      	b.n	80010f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e0:	f7ff fc18 	bl	8000914 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e04f      	b.n	8001196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f6:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 020c 	and.w	r2, r3, #12
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	429a      	cmp	r2, r3
 8001106:	d1eb      	bne.n	80010e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <HAL_RCC_ClockConfig+0x1b8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d20c      	bcs.n	8001130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	429a      	cmp	r2, r3
 800112a:	d001      	beq.n	8001130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e032      	b.n	8001196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	4916      	ldr	r1, [pc, #88]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	4313      	orrs	r3, r2
 800114c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d009      	beq.n	800116e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	490e      	ldr	r1, [pc, #56]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	4313      	orrs	r3, r2
 800116c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800116e:	f000 f821 	bl	80011b4 <HAL_RCC_GetSysClockFreq>
 8001172:	4602      	mov	r2, r0
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	490a      	ldr	r1, [pc, #40]	; (80011a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001180:	5ccb      	ldrb	r3, [r1, r3]
 8001182:	fa22 f303 	lsr.w	r3, r2, r3
 8001186:	4a09      	ldr	r2, [pc, #36]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_RCC_ClockConfig+0x1c8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fb7c 	bl	800088c <HAL_InitTick>

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023c00 	.word	0x40023c00
 80011a4:	40023800 	.word	0x40023800
 80011a8:	080028ec 	.word	0x080028ec
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000004 	.word	0x20000004

080011b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011b8:	b090      	sub	sp, #64	; 0x40
 80011ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
 80011c0:	2300      	movs	r3, #0
 80011c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011c4:	2300      	movs	r3, #0
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011cc:	4b59      	ldr	r3, [pc, #356]	; (8001334 <HAL_RCC_GetSysClockFreq+0x180>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 030c 	and.w	r3, r3, #12
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d00d      	beq.n	80011f4 <HAL_RCC_GetSysClockFreq+0x40>
 80011d8:	2b08      	cmp	r3, #8
 80011da:	f200 80a1 	bhi.w	8001320 <HAL_RCC_GetSysClockFreq+0x16c>
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <HAL_RCC_GetSysClockFreq+0x34>
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d003      	beq.n	80011ee <HAL_RCC_GetSysClockFreq+0x3a>
 80011e6:	e09b      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011e8:	4b53      	ldr	r3, [pc, #332]	; (8001338 <HAL_RCC_GetSysClockFreq+0x184>)
 80011ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80011ec:	e09b      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011ee:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_RCC_GetSysClockFreq+0x188>)
 80011f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80011f2:	e098      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f4:	4b4f      	ldr	r3, [pc, #316]	; (8001334 <HAL_RCC_GetSysClockFreq+0x180>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011fe:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <HAL_RCC_GetSysClockFreq+0x180>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d028      	beq.n	800125c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800120a:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <HAL_RCC_GetSysClockFreq+0x180>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	099b      	lsrs	r3, r3, #6
 8001210:	2200      	movs	r2, #0
 8001212:	623b      	str	r3, [r7, #32]
 8001214:	627a      	str	r2, [r7, #36]	; 0x24
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800121c:	2100      	movs	r1, #0
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_RCC_GetSysClockFreq+0x188>)
 8001220:	fb03 f201 	mul.w	r2, r3, r1
 8001224:	2300      	movs	r3, #0
 8001226:	fb00 f303 	mul.w	r3, r0, r3
 800122a:	4413      	add	r3, r2
 800122c:	4a43      	ldr	r2, [pc, #268]	; (800133c <HAL_RCC_GetSysClockFreq+0x188>)
 800122e:	fba0 1202 	umull	r1, r2, r0, r2
 8001232:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001234:	460a      	mov	r2, r1
 8001236:	62ba      	str	r2, [r7, #40]	; 0x28
 8001238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800123a:	4413      	add	r3, r2
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800123e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001240:	2200      	movs	r2, #0
 8001242:	61bb      	str	r3, [r7, #24]
 8001244:	61fa      	str	r2, [r7, #28]
 8001246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800124a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800124e:	f7fe ffbf 	bl	80001d0 <__aeabi_uldivmod>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4613      	mov	r3, r2
 8001258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800125a:	e053      	b.n	8001304 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800125c:	4b35      	ldr	r3, [pc, #212]	; (8001334 <HAL_RCC_GetSysClockFreq+0x180>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	099b      	lsrs	r3, r3, #6
 8001262:	2200      	movs	r2, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	617a      	str	r2, [r7, #20]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800126e:	f04f 0b00 	mov.w	fp, #0
 8001272:	4652      	mov	r2, sl
 8001274:	465b      	mov	r3, fp
 8001276:	f04f 0000 	mov.w	r0, #0
 800127a:	f04f 0100 	mov.w	r1, #0
 800127e:	0159      	lsls	r1, r3, #5
 8001280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001284:	0150      	lsls	r0, r2, #5
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	ebb2 080a 	subs.w	r8, r2, sl
 800128e:	eb63 090b 	sbc.w	r9, r3, fp
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	f04f 0300 	mov.w	r3, #0
 800129a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800129e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80012a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80012a6:	ebb2 0408 	subs.w	r4, r2, r8
 80012aa:	eb63 0509 	sbc.w	r5, r3, r9
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	00eb      	lsls	r3, r5, #3
 80012b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012bc:	00e2      	lsls	r2, r4, #3
 80012be:	4614      	mov	r4, r2
 80012c0:	461d      	mov	r5, r3
 80012c2:	eb14 030a 	adds.w	r3, r4, sl
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	eb45 030b 	adc.w	r3, r5, fp
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80012da:	4629      	mov	r1, r5
 80012dc:	028b      	lsls	r3, r1, #10
 80012de:	4621      	mov	r1, r4
 80012e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80012e4:	4621      	mov	r1, r4
 80012e6:	028a      	lsls	r2, r1, #10
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ee:	2200      	movs	r2, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	60fa      	str	r2, [r7, #12]
 80012f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012f8:	f7fe ff6a 	bl	80001d0 <__aeabi_uldivmod>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4613      	mov	r3, r2
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_RCC_GetSysClockFreq+0x180>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	0c1b      	lsrs	r3, r3, #16
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	3301      	adds	r3, #1
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800131e:	e002      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_RCC_GetSysClockFreq+0x184>)
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001328:	4618      	mov	r0, r3
 800132a:	3740      	adds	r7, #64	; 0x40
 800132c:	46bd      	mov	sp, r7
 800132e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	00f42400 	.word	0x00f42400
 800133c:	017d7840 	.word	0x017d7840

08001340 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800134e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001352:	2b84      	cmp	r3, #132	; 0x84
 8001354:	d005      	beq.n	8001362 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001356:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4413      	add	r3, r2
 800135e:	3303      	adds	r3, #3
 8001360:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001374:	f000 fade 	bl	8001934 <vTaskStartScheduler>
  
  return osOK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}

0800137e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800137e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001380:	b089      	sub	sp, #36	; 0x24
 8001382:	af04      	add	r7, sp, #16
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <osThreadCreate+0x54>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01c      	beq.n	80013d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685c      	ldr	r4, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691e      	ldr	r6, [r3, #16]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ffc8 	bl	8001340 <makeFreeRtosPriority>
 80013b0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013ba:	9202      	str	r2, [sp, #8]
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	9100      	str	r1, [sp, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	4632      	mov	r2, r6
 80013c4:	4629      	mov	r1, r5
 80013c6:	4620      	mov	r0, r4
 80013c8:	f000 f8ed 	bl	80015a6 <xTaskCreateStatic>
 80013cc:	4603      	mov	r3, r0
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e01c      	b.n	800140c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685c      	ldr	r4, [r3, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013de:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ffaa 	bl	8001340 <makeFreeRtosPriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	9200      	str	r2, [sp, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	4632      	mov	r2, r6
 80013fa:	4629      	mov	r1, r5
 80013fc:	4620      	mov	r0, r4
 80013fe:	f000 f92f 	bl	8001660 <xTaskCreate>
 8001402:	4603      	mov	r3, r0
 8001404:	2b01      	cmp	r3, #1
 8001406:	d001      	beq.n	800140c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001408:	2300      	movs	r3, #0
 800140a:	e000      	b.n	800140e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800140c:	68fb      	ldr	r3, [r7, #12]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001416 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <osDelay+0x16>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	e000      	b.n	800142e <osDelay+0x18>
 800142c:	2301      	movs	r3, #1
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fa4c 	bl	80018cc <vTaskDelay>
  
  return osOK;
 8001434:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f103 0208 	add.w	r2, r3, #8
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f04f 32ff 	mov.w	r2, #4294967295
 8001456:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f103 0208 	add.w	r2, r3, #8
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f103 0208 	add.w	r2, r3, #8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	601a      	str	r2, [r3, #0]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f6:	d103      	bne.n	8001500 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	e00c      	b.n	800151a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3308      	adds	r3, #8
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e002      	b.n	800150e <vListInsert+0x2e>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	429a      	cmp	r2, r3
 8001518:	d2f6      	bcs.n	8001508 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	601a      	str	r2, [r3, #0]
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001552:	b480      	push	{r7}
 8001554:	b085      	sub	sp, #20
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6892      	ldr	r2, [r2, #8]
 8001568:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6852      	ldr	r2, [r2, #4]
 8001572:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	429a      	cmp	r2, r3
 800157c:	d103      	bne.n	8001586 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	1e5a      	subs	r2, r3, #1
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b08e      	sub	sp, #56	; 0x38
 80015aa:	af04      	add	r7, sp, #16
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80015b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10a      	bne.n	80015d0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80015ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015be:	f383 8811 	msr	BASEPRI, r3
 80015c2:	f3bf 8f6f 	isb	sy
 80015c6:	f3bf 8f4f 	dsb	sy
 80015ca:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80015cc:	bf00      	nop
 80015ce:	e7fe      	b.n	80015ce <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80015d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10a      	bne.n	80015ec <xTaskCreateStatic+0x46>
	__asm volatile
 80015d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015da:	f383 8811 	msr	BASEPRI, r3
 80015de:	f3bf 8f6f 	isb	sy
 80015e2:	f3bf 8f4f 	dsb	sy
 80015e6:	61fb      	str	r3, [r7, #28]
}
 80015e8:	bf00      	nop
 80015ea:	e7fe      	b.n	80015ea <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80015ec:	2354      	movs	r3, #84	; 0x54
 80015ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	2b54      	cmp	r3, #84	; 0x54
 80015f4:	d00a      	beq.n	800160c <xTaskCreateStatic+0x66>
	__asm volatile
 80015f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015fa:	f383 8811 	msr	BASEPRI, r3
 80015fe:	f3bf 8f6f 	isb	sy
 8001602:	f3bf 8f4f 	dsb	sy
 8001606:	61bb      	str	r3, [r7, #24]
}
 8001608:	bf00      	nop
 800160a:	e7fe      	b.n	800160a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800160c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800160e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001610:	2b00      	cmp	r3, #0
 8001612:	d01e      	beq.n	8001652 <xTaskCreateStatic+0xac>
 8001614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001616:	2b00      	cmp	r3, #0
 8001618:	d01b      	beq.n	8001652 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001622:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	2202      	movs	r2, #2
 8001628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800162c:	2300      	movs	r3, #0
 800162e:	9303      	str	r3, [sp, #12]
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f850 	bl	80016ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800164a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800164c:	f000 f8d4 	bl	80017f8 <prvAddNewTaskToReadyList>
 8001650:	e001      	b.n	8001656 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001656:	697b      	ldr	r3, [r7, #20]
	}
 8001658:	4618      	mov	r0, r3
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af04      	add	r7, sp, #16
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	4613      	mov	r3, r2
 800166e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fee7 	bl	8002448 <pvPortMalloc>
 800167a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00e      	beq.n	80016a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001682:	2054      	movs	r0, #84	; 0x54
 8001684:	f000 fee0 	bl	8002448 <pvPortMalloc>
 8001688:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	631a      	str	r2, [r3, #48]	; 0x30
 8001696:	e005      	b.n	80016a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001698:	6978      	ldr	r0, [r7, #20]
 800169a:	f000 ffa1 	bl	80025e0 <vPortFree>
 800169e:	e001      	b.n	80016a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d017      	beq.n	80016da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80016b2:	88fa      	ldrh	r2, [r7, #6]
 80016b4:	2300      	movs	r3, #0
 80016b6:	9303      	str	r3, [sp, #12]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	9302      	str	r3, [sp, #8]
 80016bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 f80e 	bl	80016ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80016ce:	69f8      	ldr	r0, [r7, #28]
 80016d0:	f000 f892 	bl	80017f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	e002      	b.n	80016e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80016e0:	69bb      	ldr	r3, [r7, #24]
	}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3720      	adds	r7, #32
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b088      	sub	sp, #32
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80016f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001702:	3b01      	subs	r3, #1
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	f023 0307 	bic.w	r3, r3, #7
 8001710:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00a      	beq.n	8001732 <prvInitialiseNewTask+0x48>
	__asm volatile
 800171c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001720:	f383 8811 	msr	BASEPRI, r3
 8001724:	f3bf 8f6f 	isb	sy
 8001728:	f3bf 8f4f 	dsb	sy
 800172c:	617b      	str	r3, [r7, #20]
}
 800172e:	bf00      	nop
 8001730:	e7fe      	b.n	8001730 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d01f      	beq.n	8001778 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	e012      	b.n	8001764 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	7819      	ldrb	r1, [r3, #0]
 8001746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	4413      	add	r3, r2
 800174c:	3334      	adds	r3, #52	; 0x34
 800174e:	460a      	mov	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3301      	adds	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	2b0f      	cmp	r3, #15
 8001768:	d9e9      	bls.n	800173e <prvInitialiseNewTask+0x54>
 800176a:	e000      	b.n	800176e <prvInitialiseNewTask+0x84>
			{
				break;
 800176c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800176e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001776:	e003      	b.n	8001780 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001782:	2b06      	cmp	r3, #6
 8001784:	d901      	bls.n	800178a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001786:	2306      	movs	r3, #6
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800178a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001798:	2200      	movs	r2, #0
 800179a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179e:	3304      	adds	r3, #4
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fe6c 	bl	800147e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80017a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a8:	3318      	adds	r3, #24
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fe67 	bl	800147e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80017b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b8:	f1c3 0207 	rsb	r2, r3, #7
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80017c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80017c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c8:	2200      	movs	r2, #0
 80017ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80017cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	68f9      	ldr	r1, [r7, #12]
 80017d8:	69b8      	ldr	r0, [r7, #24]
 80017da:	f000 fc23 	bl	8002024 <pxPortInitialiseStack>
 80017de:	4602      	mov	r2, r0
 80017e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80017e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80017f0:	bf00      	nop
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001800:	f000 fd40 	bl	8002284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001804:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <prvAddNewTaskToReadyList+0xb8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <prvAddNewTaskToReadyList+0xb8>)
 800180c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800180e:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <prvAddNewTaskToReadyList+0xbc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001816:	4a27      	ldr	r2, [pc, #156]	; (80018b4 <prvAddNewTaskToReadyList+0xbc>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <prvAddNewTaskToReadyList+0xb8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d110      	bne.n	8001846 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001824:	f000 fabc 	bl	8001da0 <prvInitialiseTaskLists>
 8001828:	e00d      	b.n	8001846 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <prvAddNewTaskToReadyList+0xc0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <prvAddNewTaskToReadyList+0xbc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	429a      	cmp	r2, r3
 800183e:	d802      	bhi.n	8001846 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001840:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <prvAddNewTaskToReadyList+0xbc>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <prvAddNewTaskToReadyList+0xc4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <prvAddNewTaskToReadyList+0xc4>)
 800184e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	2201      	movs	r2, #1
 8001856:	409a      	lsls	r2, r3
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <prvAddNewTaskToReadyList+0xc8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4313      	orrs	r3, r2
 800185e:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <prvAddNewTaskToReadyList+0xc8>)
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <prvAddNewTaskToReadyList+0xcc>)
 8001870:	441a      	add	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3304      	adds	r3, #4
 8001876:	4619      	mov	r1, r3
 8001878:	4610      	mov	r0, r2
 800187a:	f7ff fe0d 	bl	8001498 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800187e:	f000 fd31 	bl	80022e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <prvAddNewTaskToReadyList+0xc0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00e      	beq.n	80018a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <prvAddNewTaskToReadyList+0xbc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	429a      	cmp	r2, r3
 8001896:	d207      	bcs.n	80018a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <prvAddNewTaskToReadyList+0xd0>)
 800189a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	f3bf 8f4f 	dsb	sy
 80018a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	2000038c 	.word	0x2000038c
 80018b4:	2000028c 	.word	0x2000028c
 80018b8:	20000398 	.word	0x20000398
 80018bc:	200003a8 	.word	0x200003a8
 80018c0:	20000394 	.word	0x20000394
 80018c4:	20000290 	.word	0x20000290
 80018c8:	e000ed04 	.word	0xe000ed04

080018cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d017      	beq.n	800190e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <vTaskDelay+0x60>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00a      	beq.n	80018fc <vTaskDelay+0x30>
	__asm volatile
 80018e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ea:	f383 8811 	msr	BASEPRI, r3
 80018ee:	f3bf 8f6f 	isb	sy
 80018f2:	f3bf 8f4f 	dsb	sy
 80018f6:	60bb      	str	r3, [r7, #8]
}
 80018f8:	bf00      	nop
 80018fa:	e7fe      	b.n	80018fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80018fc:	f000 f87a 	bl	80019f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001900:	2100      	movs	r1, #0
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fb28 	bl	8001f58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001908:	f000 f882 	bl	8001a10 <xTaskResumeAll>
 800190c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d107      	bne.n	8001924 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <vTaskDelay+0x64>)
 8001916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	f3bf 8f4f 	dsb	sy
 8001920:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200003b4 	.word	0x200003b4
 8001930:	e000ed04 	.word	0xe000ed04

08001934 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001942:	463a      	mov	r2, r7
 8001944:	1d39      	adds	r1, r7, #4
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fdbe 	bl	80004cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	9202      	str	r2, [sp, #8]
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	2300      	movs	r3, #0
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2300      	movs	r3, #0
 8001960:	460a      	mov	r2, r1
 8001962:	491e      	ldr	r1, [pc, #120]	; (80019dc <vTaskStartScheduler+0xa8>)
 8001964:	481e      	ldr	r0, [pc, #120]	; (80019e0 <vTaskStartScheduler+0xac>)
 8001966:	f7ff fe1e 	bl	80015a6 <xTaskCreateStatic>
 800196a:	4603      	mov	r3, r0
 800196c:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <vTaskStartScheduler+0xb0>)
 800196e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001970:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <vTaskStartScheduler+0xb0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001978:	2301      	movs	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e001      	b.n	8001982 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d116      	bne.n	80019b6 <vTaskStartScheduler+0x82>
	__asm volatile
 8001988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800198c:	f383 8811 	msr	BASEPRI, r3
 8001990:	f3bf 8f6f 	isb	sy
 8001994:	f3bf 8f4f 	dsb	sy
 8001998:	613b      	str	r3, [r7, #16]
}
 800199a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <vTaskStartScheduler+0xb4>)
 800199e:	f04f 32ff 	mov.w	r2, #4294967295
 80019a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <vTaskStartScheduler+0xb8>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <vTaskStartScheduler+0xbc>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80019b0:	f000 fbc6 	bl	8002140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80019b4:	e00e      	b.n	80019d4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d10a      	bne.n	80019d4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80019be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c2:	f383 8811 	msr	BASEPRI, r3
 80019c6:	f3bf 8f6f 	isb	sy
 80019ca:	f3bf 8f4f 	dsb	sy
 80019ce:	60fb      	str	r3, [r7, #12]
}
 80019d0:	bf00      	nop
 80019d2:	e7fe      	b.n	80019d2 <vTaskStartScheduler+0x9e>
}
 80019d4:	bf00      	nop
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	080028e4 	.word	0x080028e4
 80019e0:	08001d71 	.word	0x08001d71
 80019e4:	200003b0 	.word	0x200003b0
 80019e8:	200003ac 	.word	0x200003ac
 80019ec:	20000398 	.word	0x20000398
 80019f0:	20000390 	.word	0x20000390

080019f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <vTaskSuspendAll+0x18>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	3301      	adds	r3, #1
 80019fe:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <vTaskSuspendAll+0x18>)
 8001a00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	200003b4 	.word	0x200003b4

08001a10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001a1e:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <xTaskResumeAll+0x114>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10a      	bne.n	8001a3c <xTaskResumeAll+0x2c>
	__asm volatile
 8001a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2a:	f383 8811 	msr	BASEPRI, r3
 8001a2e:	f3bf 8f6f 	isb	sy
 8001a32:	f3bf 8f4f 	dsb	sy
 8001a36:	603b      	str	r3, [r7, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	e7fe      	b.n	8001a3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001a3c:	f000 fc22 	bl	8002284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001a40:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <xTaskResumeAll+0x114>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	4a37      	ldr	r2, [pc, #220]	; (8001b24 <xTaskResumeAll+0x114>)
 8001a48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a4a:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <xTaskResumeAll+0x114>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d161      	bne.n	8001b16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a52:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <xTaskResumeAll+0x118>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d05d      	beq.n	8001b16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a5a:	e02e      	b.n	8001aba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a5c:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <xTaskResumeAll+0x11c>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3318      	adds	r3, #24
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fd72 	bl	8001552 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	3304      	adds	r3, #4
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fd6d 	bl	8001552 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <xTaskResumeAll+0x120>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	4a2a      	ldr	r2, [pc, #168]	; (8001b30 <xTaskResumeAll+0x120>)
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4a27      	ldr	r2, [pc, #156]	; (8001b34 <xTaskResumeAll+0x124>)
 8001a98:	441a      	add	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	f7ff fcf9 	bl	8001498 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <xTaskResumeAll+0x128>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d302      	bcc.n	8001aba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <xTaskResumeAll+0x12c>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <xTaskResumeAll+0x11c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1cc      	bne.n	8001a5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001ac8:	f000 fa08 	bl	8001edc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <xTaskResumeAll+0x130>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d010      	beq.n	8001afa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001ad8:	f000 f836 	bl	8001b48 <xTaskIncrementTick>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <xTaskResumeAll+0x12c>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f1      	bne.n	8001ad8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <xTaskResumeAll+0x130>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <xTaskResumeAll+0x12c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001b02:	2301      	movs	r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <xTaskResumeAll+0x134>)
 8001b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	f3bf 8f4f 	dsb	sy
 8001b12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001b16:	f000 fbe5 	bl	80022e4 <vPortExitCritical>

	return xAlreadyYielded;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200003b4 	.word	0x200003b4
 8001b28:	2000038c 	.word	0x2000038c
 8001b2c:	2000034c 	.word	0x2000034c
 8001b30:	20000394 	.word	0x20000394
 8001b34:	20000290 	.word	0x20000290
 8001b38:	2000028c 	.word	0x2000028c
 8001b3c:	200003a0 	.word	0x200003a0
 8001b40:	2000039c 	.word	0x2000039c
 8001b44:	e000ed04 	.word	0xe000ed04

08001b48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b52:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <xTaskIncrementTick+0x144>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f040 808e 	bne.w	8001c78 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b5c:	4b4c      	ldr	r3, [pc, #304]	; (8001c90 <xTaskIncrementTick+0x148>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001b64:	4a4a      	ldr	r2, [pc, #296]	; (8001c90 <xTaskIncrementTick+0x148>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d120      	bne.n	8001bb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001b70:	4b48      	ldr	r3, [pc, #288]	; (8001c94 <xTaskIncrementTick+0x14c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00a      	beq.n	8001b90 <xTaskIncrementTick+0x48>
	__asm volatile
 8001b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7e:	f383 8811 	msr	BASEPRI, r3
 8001b82:	f3bf 8f6f 	isb	sy
 8001b86:	f3bf 8f4f 	dsb	sy
 8001b8a:	603b      	str	r3, [r7, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	e7fe      	b.n	8001b8e <xTaskIncrementTick+0x46>
 8001b90:	4b40      	ldr	r3, [pc, #256]	; (8001c94 <xTaskIncrementTick+0x14c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b40      	ldr	r3, [pc, #256]	; (8001c98 <xTaskIncrementTick+0x150>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a3e      	ldr	r2, [pc, #248]	; (8001c94 <xTaskIncrementTick+0x14c>)
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4a3e      	ldr	r2, [pc, #248]	; (8001c98 <xTaskIncrementTick+0x150>)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <xTaskIncrementTick+0x154>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	4a3c      	ldr	r2, [pc, #240]	; (8001c9c <xTaskIncrementTick+0x154>)
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	f000 f995 	bl	8001edc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	; (8001ca0 <xTaskIncrementTick+0x158>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d348      	bcc.n	8001c4e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bbc:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <xTaskIncrementTick+0x14c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d104      	bne.n	8001bd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bc6:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <xTaskIncrementTick+0x158>)
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	601a      	str	r2, [r3, #0]
					break;
 8001bce:	e03e      	b.n	8001c4e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bd0:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <xTaskIncrementTick+0x14c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d203      	bcs.n	8001bf0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001be8:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <xTaskIncrementTick+0x158>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001bee:	e02e      	b.n	8001c4e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fcac 	bl	8001552 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	3318      	adds	r3, #24
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fca3 	bl	8001552 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	2201      	movs	r2, #1
 8001c12:	409a      	lsls	r2, r3
 8001c14:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <xTaskIncrementTick+0x15c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	4a22      	ldr	r2, [pc, #136]	; (8001ca4 <xTaskIncrementTick+0x15c>)
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <xTaskIncrementTick+0x160>)
 8001c2c:	441a      	add	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	3304      	adds	r3, #4
 8001c32:	4619      	mov	r1, r3
 8001c34:	4610      	mov	r0, r2
 8001c36:	f7ff fc2f 	bl	8001498 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <xTaskIncrementTick+0x164>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d3b9      	bcc.n	8001bbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c4c:	e7b6      	b.n	8001bbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <xTaskIncrementTick+0x164>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c54:	4914      	ldr	r1, [pc, #80]	; (8001ca8 <xTaskIncrementTick+0x160>)
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d901      	bls.n	8001c6a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8001c66:	2301      	movs	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <xTaskIncrementTick+0x168>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8001c72:	2301      	movs	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e004      	b.n	8001c82 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <xTaskIncrementTick+0x16c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <xTaskIncrementTick+0x16c>)
 8001c80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001c82:	697b      	ldr	r3, [r7, #20]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200003b4 	.word	0x200003b4
 8001c90:	20000390 	.word	0x20000390
 8001c94:	20000344 	.word	0x20000344
 8001c98:	20000348 	.word	0x20000348
 8001c9c:	200003a4 	.word	0x200003a4
 8001ca0:	200003ac 	.word	0x200003ac
 8001ca4:	20000394 	.word	0x20000394
 8001ca8:	20000290 	.word	0x20000290
 8001cac:	2000028c 	.word	0x2000028c
 8001cb0:	200003a0 	.word	0x200003a0
 8001cb4:	2000039c 	.word	0x2000039c

08001cb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001cbe:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <vTaskSwitchContext+0xa4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <vTaskSwitchContext+0xa8>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001ccc:	e03f      	b.n	8001d4e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <vTaskSwitchContext+0xa8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cd4:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <vTaskSwitchContext+0xac>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
 8001ce4:	f1c3 031f 	rsb	r3, r3, #31
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	491f      	ldr	r1, [pc, #124]	; (8001d68 <vTaskSwitchContext+0xb0>)
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10a      	bne.n	8001d14 <vTaskSwitchContext+0x5c>
	__asm volatile
 8001cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d02:	f383 8811 	msr	BASEPRI, r3
 8001d06:	f3bf 8f6f 	isb	sy
 8001d0a:	f3bf 8f4f 	dsb	sy
 8001d0e:	607b      	str	r3, [r7, #4]
}
 8001d10:	bf00      	nop
 8001d12:	e7fe      	b.n	8001d12 <vTaskSwitchContext+0x5a>
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <vTaskSwitchContext+0xb0>)
 8001d20:	4413      	add	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	3308      	adds	r3, #8
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d104      	bne.n	8001d44 <vTaskSwitchContext+0x8c>
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <vTaskSwitchContext+0xb4>)
 8001d4c:	6013      	str	r3, [r2, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	200003b4 	.word	0x200003b4
 8001d60:	200003a0 	.word	0x200003a0
 8001d64:	20000394 	.word	0x20000394
 8001d68:	20000290 	.word	0x20000290
 8001d6c:	2000028c 	.word	0x2000028c

08001d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001d78:	f000 f852 	bl	8001e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <prvIdleTask+0x28>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d9f9      	bls.n	8001d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <prvIdleTask+0x2c>)
 8001d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001d94:	e7f0      	b.n	8001d78 <prvIdleTask+0x8>
 8001d96:	bf00      	nop
 8001d98:	20000290 	.word	0x20000290
 8001d9c:	e000ed04 	.word	0xe000ed04

08001da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	e00c      	b.n	8001dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <prvInitialiseTaskLists+0x60>)
 8001db8:	4413      	add	r3, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fb3f 	bl	800143e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b06      	cmp	r3, #6
 8001dca:	d9ef      	bls.n	8001dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001dcc:	480d      	ldr	r0, [pc, #52]	; (8001e04 <prvInitialiseTaskLists+0x64>)
 8001dce:	f7ff fb36 	bl	800143e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001dd2:	480d      	ldr	r0, [pc, #52]	; (8001e08 <prvInitialiseTaskLists+0x68>)
 8001dd4:	f7ff fb33 	bl	800143e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001dd8:	480c      	ldr	r0, [pc, #48]	; (8001e0c <prvInitialiseTaskLists+0x6c>)
 8001dda:	f7ff fb30 	bl	800143e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001dde:	480c      	ldr	r0, [pc, #48]	; (8001e10 <prvInitialiseTaskLists+0x70>)
 8001de0:	f7ff fb2d 	bl	800143e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001de4:	480b      	ldr	r0, [pc, #44]	; (8001e14 <prvInitialiseTaskLists+0x74>)
 8001de6:	f7ff fb2a 	bl	800143e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <prvInitialiseTaskLists+0x78>)
 8001dec:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <prvInitialiseTaskLists+0x64>)
 8001dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <prvInitialiseTaskLists+0x7c>)
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <prvInitialiseTaskLists+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000290 	.word	0x20000290
 8001e04:	2000031c 	.word	0x2000031c
 8001e08:	20000330 	.word	0x20000330
 8001e0c:	2000034c 	.word	0x2000034c
 8001e10:	20000360 	.word	0x20000360
 8001e14:	20000378 	.word	0x20000378
 8001e18:	20000344 	.word	0x20000344
 8001e1c:	20000348 	.word	0x20000348

08001e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e26:	e019      	b.n	8001e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001e28:	f000 fa2c 	bl	8002284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <prvCheckTasksWaitingTermination+0x50>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3304      	adds	r3, #4
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fb8a 	bl	8001552 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <prvCheckTasksWaitingTermination+0x54>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <prvCheckTasksWaitingTermination+0x54>)
 8001e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <prvCheckTasksWaitingTermination+0x58>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <prvCheckTasksWaitingTermination+0x58>)
 8001e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001e52:	f000 fa47 	bl	80022e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f810 	bl	8001e7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <prvCheckTasksWaitingTermination+0x58>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e1      	bne.n	8001e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000360 	.word	0x20000360
 8001e74:	2000038c 	.word	0x2000038c
 8001e78:	20000374 	.word	0x20000374

08001e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d108      	bne.n	8001ea0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fba4 	bl	80025e0 <vPortFree>
				vPortFree( pxTCB );
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fba1 	bl	80025e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001e9e:	e018      	b.n	8001ed2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d103      	bne.n	8001eb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fb98 	bl	80025e0 <vPortFree>
	}
 8001eb0:	e00f      	b.n	8001ed2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d00a      	beq.n	8001ed2 <prvDeleteTCB+0x56>
	__asm volatile
 8001ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec0:	f383 8811 	msr	BASEPRI, r3
 8001ec4:	f3bf 8f6f 	isb	sy
 8001ec8:	f3bf 8f4f 	dsb	sy
 8001ecc:	60fb      	str	r3, [r7, #12]
}
 8001ece:	bf00      	nop
 8001ed0:	e7fe      	b.n	8001ed0 <prvDeleteTCB+0x54>
	}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <prvResetNextTaskUnblockTime+0x38>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d104      	bne.n	8001ef6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <prvResetNextTaskUnblockTime+0x3c>)
 8001eee:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001ef4:	e008      	b.n	8001f08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <prvResetNextTaskUnblockTime+0x38>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <prvResetNextTaskUnblockTime+0x3c>)
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	20000344 	.word	0x20000344
 8001f18:	200003ac 	.word	0x200003ac

08001f1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <xTaskGetSchedulerState+0x34>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d102      	bne.n	8001f30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	e008      	b.n	8001f42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <xTaskGetSchedulerState+0x38>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	e001      	b.n	8001f42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001f42:	687b      	ldr	r3, [r7, #4]
	}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	20000398 	.word	0x20000398
 8001f54:	200003b4 	.word	0x200003b4

08001f58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001f62:	4b29      	ldr	r3, [pc, #164]	; (8002008 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f68:	4b28      	ldr	r3, [pc, #160]	; (800200c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff faef 	bl	8001552 <uxListRemove>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10b      	bne.n	8001f92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	2201      	movs	r2, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	4a20      	ldr	r2, [pc, #128]	; (8002010 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001f90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d10a      	bne.n	8001fb0 <prvAddCurrentTaskToDelayedList+0x58>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	481a      	ldr	r0, [pc, #104]	; (8002014 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001faa:	f7ff fa75 	bl	8001498 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001fae:	e026      	b.n	8001ffe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d209      	bcs.n	8001fdc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	f7ff fa83 	bl	80014e0 <vListInsert>
}
 8001fda:	e010      	b.n	8001ffe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <prvAddCurrentTaskToDelayedList+0xc4>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4610      	mov	r0, r2
 8001fea:	f7ff fa79 	bl	80014e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d202      	bcs.n	8001ffe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001ff8:	4a09      	ldr	r2, [pc, #36]	; (8002020 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	6013      	str	r3, [r2, #0]
}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000390 	.word	0x20000390
 800200c:	2000028c 	.word	0x2000028c
 8002010:	20000394 	.word	0x20000394
 8002014:	20000378 	.word	0x20000378
 8002018:	20000348 	.word	0x20000348
 800201c:	20000344 	.word	0x20000344
 8002020:	200003ac 	.word	0x200003ac

08002024 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3b04      	subs	r3, #4
 8002034:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800203c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3b04      	subs	r3, #4
 8002042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f023 0201 	bic.w	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3b04      	subs	r3, #4
 8002052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002054:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <pxPortInitialiseStack+0x64>)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3b14      	subs	r3, #20
 800205e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3b04      	subs	r3, #4
 800206a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f06f 0202 	mvn.w	r2, #2
 8002072:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3b20      	subs	r3, #32
 8002078:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800207a:	68fb      	ldr	r3, [r7, #12]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	0800208d 	.word	0x0800208d

0800208c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <prvTaskExitError+0x54>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209e:	d00a      	beq.n	80020b6 <prvTaskExitError+0x2a>
	__asm volatile
 80020a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a4:	f383 8811 	msr	BASEPRI, r3
 80020a8:	f3bf 8f6f 	isb	sy
 80020ac:	f3bf 8f4f 	dsb	sy
 80020b0:	60fb      	str	r3, [r7, #12]
}
 80020b2:	bf00      	nop
 80020b4:	e7fe      	b.n	80020b4 <prvTaskExitError+0x28>
	__asm volatile
 80020b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
 80020c6:	60bb      	str	r3, [r7, #8]
}
 80020c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80020ca:	bf00      	nop
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0fc      	beq.n	80020cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	2000000c 	.word	0x2000000c
	...

080020f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <pxCurrentTCBConst2>)
 80020f2:	6819      	ldr	r1, [r3, #0]
 80020f4:	6808      	ldr	r0, [r1, #0]
 80020f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020fa:	f380 8809 	msr	PSP, r0
 80020fe:	f3bf 8f6f 	isb	sy
 8002102:	f04f 0000 	mov.w	r0, #0
 8002106:	f380 8811 	msr	BASEPRI, r0
 800210a:	4770      	bx	lr
 800210c:	f3af 8000 	nop.w

08002110 <pxCurrentTCBConst2>:
 8002110:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop

08002118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002118:	4808      	ldr	r0, [pc, #32]	; (800213c <prvPortStartFirstTask+0x24>)
 800211a:	6800      	ldr	r0, [r0, #0]
 800211c:	6800      	ldr	r0, [r0, #0]
 800211e:	f380 8808 	msr	MSP, r0
 8002122:	f04f 0000 	mov.w	r0, #0
 8002126:	f380 8814 	msr	CONTROL, r0
 800212a:	b662      	cpsie	i
 800212c:	b661      	cpsie	f
 800212e:	f3bf 8f4f 	dsb	sy
 8002132:	f3bf 8f6f 	isb	sy
 8002136:	df00      	svc	0
 8002138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800213a:	bf00      	nop
 800213c:	e000ed08 	.word	0xe000ed08

08002140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002146:	4b46      	ldr	r3, [pc, #280]	; (8002260 <xPortStartScheduler+0x120>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a46      	ldr	r2, [pc, #280]	; (8002264 <xPortStartScheduler+0x124>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d10a      	bne.n	8002166 <xPortStartScheduler+0x26>
	__asm volatile
 8002150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	613b      	str	r3, [r7, #16]
}
 8002162:	bf00      	nop
 8002164:	e7fe      	b.n	8002164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002166:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <xPortStartScheduler+0x120>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a3f      	ldr	r2, [pc, #252]	; (8002268 <xPortStartScheduler+0x128>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d10a      	bne.n	8002186 <xPortStartScheduler+0x46>
	__asm volatile
 8002170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002174:	f383 8811 	msr	BASEPRI, r3
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	60fb      	str	r3, [r7, #12]
}
 8002182:	bf00      	nop
 8002184:	e7fe      	b.n	8002184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002186:	4b39      	ldr	r3, [pc, #228]	; (800226c <xPortStartScheduler+0x12c>)
 8002188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	22ff      	movs	r2, #255	; 0xff
 8002196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b31      	ldr	r3, [pc, #196]	; (8002270 <xPortStartScheduler+0x130>)
 80021ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80021ae:	4b31      	ldr	r3, [pc, #196]	; (8002274 <xPortStartScheduler+0x134>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021b4:	e009      	b.n	80021ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80021b6:	4b2f      	ldr	r3, [pc, #188]	; (8002274 <xPortStartScheduler+0x134>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <xPortStartScheduler+0x134>)
 80021be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d2:	2b80      	cmp	r3, #128	; 0x80
 80021d4:	d0ef      	beq.n	80021b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80021d6:	4b27      	ldr	r3, [pc, #156]	; (8002274 <xPortStartScheduler+0x134>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d00a      	beq.n	80021f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80021e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e6:	f383 8811 	msr	BASEPRI, r3
 80021ea:	f3bf 8f6f 	isb	sy
 80021ee:	f3bf 8f4f 	dsb	sy
 80021f2:	60bb      	str	r3, [r7, #8]
}
 80021f4:	bf00      	nop
 80021f6:	e7fe      	b.n	80021f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80021f8:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <xPortStartScheduler+0x134>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <xPortStartScheduler+0x134>)
 8002200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <xPortStartScheduler+0x134>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800220a:	4a1a      	ldr	r2, [pc, #104]	; (8002274 <xPortStartScheduler+0x134>)
 800220c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002216:	4b18      	ldr	r3, [pc, #96]	; (8002278 <xPortStartScheduler+0x138>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a17      	ldr	r2, [pc, #92]	; (8002278 <xPortStartScheduler+0x138>)
 800221c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <xPortStartScheduler+0x138>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a14      	ldr	r2, [pc, #80]	; (8002278 <xPortStartScheduler+0x138>)
 8002228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800222c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800222e:	f000 f8dd 	bl	80023ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <xPortStartScheduler+0x13c>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002238:	f000 f8fc 	bl	8002434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <xPortStartScheduler+0x140>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <xPortStartScheduler+0x140>)
 8002242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002248:	f7ff ff66 	bl	8002118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800224c:	f7ff fd34 	bl	8001cb8 <vTaskSwitchContext>
	prvTaskExitError();
 8002250:	f7ff ff1c 	bl	800208c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00
 8002264:	410fc271 	.word	0x410fc271
 8002268:	410fc270 	.word	0x410fc270
 800226c:	e000e400 	.word	0xe000e400
 8002270:	200003b8 	.word	0x200003b8
 8002274:	200003bc 	.word	0x200003bc
 8002278:	e000ed20 	.word	0xe000ed20
 800227c:	2000000c 	.word	0x2000000c
 8002280:	e000ef34 	.word	0xe000ef34

08002284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
	__asm volatile
 800228a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	607b      	str	r3, [r7, #4]
}
 800229c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <vPortEnterCritical+0x58>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <vPortEnterCritical+0x58>)
 80022a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <vPortEnterCritical+0x58>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d10f      	bne.n	80022d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <vPortEnterCritical+0x5c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80022ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	603b      	str	r3, [r7, #0]
}
 80022cc:	bf00      	nop
 80022ce:	e7fe      	b.n	80022ce <vPortEnterCritical+0x4a>
	}
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	2000000c 	.word	0x2000000c
 80022e0:	e000ed04 	.word	0xe000ed04

080022e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <vPortExitCritical+0x50>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10a      	bne.n	8002308 <vPortExitCritical+0x24>
	__asm volatile
 80022f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	607b      	str	r3, [r7, #4]
}
 8002304:	bf00      	nop
 8002306:	e7fe      	b.n	8002306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <vPortExitCritical+0x50>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3b01      	subs	r3, #1
 800230e:	4a09      	ldr	r2, [pc, #36]	; (8002334 <vPortExitCritical+0x50>)
 8002310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <vPortExitCritical+0x50>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <vPortExitCritical+0x42>
 800231a:	2300      	movs	r3, #0
 800231c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	2000000c 	.word	0x2000000c
	...

08002340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002340:	f3ef 8009 	mrs	r0, PSP
 8002344:	f3bf 8f6f 	isb	sy
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <pxCurrentTCBConst>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	f01e 0f10 	tst.w	lr, #16
 8002350:	bf08      	it	eq
 8002352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800235a:	6010      	str	r0, [r2, #0]
 800235c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002364:	f380 8811 	msr	BASEPRI, r0
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	f7ff fca2 	bl	8001cb8 <vTaskSwitchContext>
 8002374:	f04f 0000 	mov.w	r0, #0
 8002378:	f380 8811 	msr	BASEPRI, r0
 800237c:	bc09      	pop	{r0, r3}
 800237e:	6819      	ldr	r1, [r3, #0]
 8002380:	6808      	ldr	r0, [r1, #0]
 8002382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002386:	f01e 0f10 	tst.w	lr, #16
 800238a:	bf08      	it	eq
 800238c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002390:	f380 8809 	msr	PSP, r0
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	f3af 8000 	nop.w

080023a0 <pxCurrentTCBConst>:
 80023a0:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop

080023a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
	__asm volatile
 80023ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b2:	f383 8811 	msr	BASEPRI, r3
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	607b      	str	r3, [r7, #4]
}
 80023c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80023c2:	f7ff fbc1 	bl	8001b48 <xTaskIncrementTick>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <xPortSysTickHandler+0x40>)
 80023ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	2300      	movs	r3, #0
 80023d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f383 8811 	msr	BASEPRI, r3
}
 80023de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	e000ed04 	.word	0xe000ed04

080023ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <vPortSetupTimerInterrupt+0x34>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <vPortSetupTimerInterrupt+0x38>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <vPortSetupTimerInterrupt+0x3c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0a      	ldr	r2, [pc, #40]	; (800242c <vPortSetupTimerInterrupt+0x40>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	099b      	lsrs	r3, r3, #6
 8002408:	4a09      	ldr	r2, [pc, #36]	; (8002430 <vPortSetupTimerInterrupt+0x44>)
 800240a:	3b01      	subs	r3, #1
 800240c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800240e:	4b04      	ldr	r3, [pc, #16]	; (8002420 <vPortSetupTimerInterrupt+0x34>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010
 8002424:	e000e018 	.word	0xe000e018
 8002428:	20000000 	.word	0x20000000
 800242c:	10624dd3 	.word	0x10624dd3
 8002430:	e000e014 	.word	0xe000e014

08002434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002444 <vPortEnableVFP+0x10>
 8002438:	6801      	ldr	r1, [r0, #0]
 800243a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800243e:	6001      	str	r1, [r0, #0]
 8002440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002442:	bf00      	nop
 8002444:	e000ed88 	.word	0xe000ed88

08002448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002454:	f7ff face 	bl	80019f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002458:	4b5b      	ldr	r3, [pc, #364]	; (80025c8 <pvPortMalloc+0x180>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002460:	f000 f920 	bl	80026a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002464:	4b59      	ldr	r3, [pc, #356]	; (80025cc <pvPortMalloc+0x184>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 8093 	bne.w	8002598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01d      	beq.n	80024b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002478:	2208      	movs	r2, #8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	2b00      	cmp	r3, #0
 8002488:	d014      	beq.n	80024b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f023 0307 	bic.w	r3, r3, #7
 8002490:	3308      	adds	r3, #8
 8002492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <pvPortMalloc+0x6c>
	__asm volatile
 800249e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	617b      	str	r3, [r7, #20]
}
 80024b0:	bf00      	nop
 80024b2:	e7fe      	b.n	80024b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d06e      	beq.n	8002598 <pvPortMalloc+0x150>
 80024ba:	4b45      	ldr	r3, [pc, #276]	; (80025d0 <pvPortMalloc+0x188>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d869      	bhi.n	8002598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80024c4:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <pvPortMalloc+0x18c>)
 80024c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80024c8:	4b42      	ldr	r3, [pc, #264]	; (80025d4 <pvPortMalloc+0x18c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024ce:	e004      	b.n	80024da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d903      	bls.n	80024ec <pvPortMalloc+0xa4>
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f1      	bne.n	80024d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80024ec:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <pvPortMalloc+0x180>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d050      	beq.n	8002598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2208      	movs	r2, #8
 80024fc:	4413      	add	r3, r2
 80024fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	1ad2      	subs	r2, r2, r3
 8002510:	2308      	movs	r3, #8
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	429a      	cmp	r2, r3
 8002516:	d91f      	bls.n	8002558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <pvPortMalloc+0xf8>
	__asm volatile
 800252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252e:	f383 8811 	msr	BASEPRI, r3
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	613b      	str	r3, [r7, #16]
}
 800253c:	bf00      	nop
 800253e:	e7fe      	b.n	800253e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	1ad2      	subs	r2, r2, r3
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002552:	69b8      	ldr	r0, [r7, #24]
 8002554:	f000 f908 	bl	8002768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002558:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <pvPortMalloc+0x188>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	4a1b      	ldr	r2, [pc, #108]	; (80025d0 <pvPortMalloc+0x188>)
 8002564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <pvPortMalloc+0x188>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <pvPortMalloc+0x190>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d203      	bcs.n	800257a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <pvPortMalloc+0x188>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <pvPortMalloc+0x190>)
 8002578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <pvPortMalloc+0x184>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	431a      	orrs	r2, r3
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <pvPortMalloc+0x194>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	4a11      	ldr	r2, [pc, #68]	; (80025dc <pvPortMalloc+0x194>)
 8002596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002598:	f7ff fa3a 	bl	8001a10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <pvPortMalloc+0x174>
	__asm volatile
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	60fb      	str	r3, [r7, #12]
}
 80025b8:	bf00      	nop
 80025ba:	e7fe      	b.n	80025ba <pvPortMalloc+0x172>
	return pvReturn;
 80025bc:	69fb      	ldr	r3, [r7, #28]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3728      	adds	r7, #40	; 0x28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20003fc8 	.word	0x20003fc8
 80025cc:	20003fdc 	.word	0x20003fdc
 80025d0:	20003fcc 	.word	0x20003fcc
 80025d4:	20003fc0 	.word	0x20003fc0
 80025d8:	20003fd0 	.word	0x20003fd0
 80025dc:	20003fd4 	.word	0x20003fd4

080025e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d04d      	beq.n	800268e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80025f2:	2308      	movs	r3, #8
 80025f4:	425b      	negs	r3, r3
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4413      	add	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4b24      	ldr	r3, [pc, #144]	; (8002698 <vPortFree+0xb8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <vPortFree+0x44>
	__asm volatile
 800260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	60fb      	str	r3, [r7, #12]
}
 8002620:	bf00      	nop
 8002622:	e7fe      	b.n	8002622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <vPortFree+0x62>
	__asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	60bb      	str	r3, [r7, #8]
}
 800263e:	bf00      	nop
 8002640:	e7fe      	b.n	8002640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <vPortFree+0xb8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01e      	beq.n	800268e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d11a      	bne.n	800268e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <vPortFree+0xb8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	43db      	mvns	r3, r3
 8002662:	401a      	ands	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002668:	f7ff f9c4 	bl	80019f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <vPortFree+0xbc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4413      	add	r3, r2
 8002676:	4a09      	ldr	r2, [pc, #36]	; (800269c <vPortFree+0xbc>)
 8002678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800267a:	6938      	ldr	r0, [r7, #16]
 800267c:	f000 f874 	bl	8002768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <vPortFree+0xc0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3301      	adds	r3, #1
 8002686:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <vPortFree+0xc0>)
 8002688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800268a:	f7ff f9c1 	bl	8001a10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20003fdc 	.word	0x20003fdc
 800269c:	20003fcc 	.word	0x20003fcc
 80026a0:	20003fd8 	.word	0x20003fd8

080026a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80026aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80026ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80026b0:	4b27      	ldr	r3, [pc, #156]	; (8002750 <prvHeapInit+0xac>)
 80026b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00c      	beq.n	80026d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3307      	adds	r3, #7
 80026c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0307 	bic.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	4a1f      	ldr	r2, [pc, #124]	; (8002750 <prvHeapInit+0xac>)
 80026d4:	4413      	add	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80026dc:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <prvHeapInit+0xb0>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80026e2:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <prvHeapInit+0xb0>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	4413      	add	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80026f0:	2208      	movs	r2, #8
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0307 	bic.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a15      	ldr	r2, [pc, #84]	; (8002758 <prvHeapInit+0xb4>)
 8002704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <prvHeapInit+0xb4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <prvHeapInit+0xb4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	1ad2      	subs	r2, r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <prvHeapInit+0xb4>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <prvHeapInit+0xb8>)
 8002732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a09      	ldr	r2, [pc, #36]	; (8002760 <prvHeapInit+0xbc>)
 800273a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <prvHeapInit+0xc0>)
 800273e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002742:	601a      	str	r2, [r3, #0]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	200003c0 	.word	0x200003c0
 8002754:	20003fc0 	.word	0x20003fc0
 8002758:	20003fc8 	.word	0x20003fc8
 800275c:	20003fd0 	.word	0x20003fd0
 8002760:	20003fcc 	.word	0x20003fcc
 8002764:	20003fdc 	.word	0x20003fdc

08002768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002770:	4b28      	ldr	r3, [pc, #160]	; (8002814 <prvInsertBlockIntoFreeList+0xac>)
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e002      	b.n	800277c <prvInsertBlockIntoFreeList+0x14>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	d8f7      	bhi.n	8002776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	4413      	add	r3, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	429a      	cmp	r2, r3
 8002796:	d108      	bne.n	80027aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	441a      	add	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	441a      	add	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d118      	bne.n	80027f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <prvInsertBlockIntoFreeList+0xb0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d00d      	beq.n	80027e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	441a      	add	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e008      	b.n	80027f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80027e6:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <prvInsertBlockIntoFreeList+0xb0>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e003      	b.n	80027f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d002      	beq.n	8002806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20003fc0 	.word	0x20003fc0
 8002818:	20003fc8 	.word	0x20003fc8

0800281c <memset>:
 800281c:	4402      	add	r2, r0
 800281e:	4603      	mov	r3, r0
 8002820:	4293      	cmp	r3, r2
 8002822:	d100      	bne.n	8002826 <memset+0xa>
 8002824:	4770      	bx	lr
 8002826:	f803 1b01 	strb.w	r1, [r3], #1
 800282a:	e7f9      	b.n	8002820 <memset+0x4>

0800282c <__libc_init_array>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	4d0d      	ldr	r5, [pc, #52]	; (8002864 <__libc_init_array+0x38>)
 8002830:	4c0d      	ldr	r4, [pc, #52]	; (8002868 <__libc_init_array+0x3c>)
 8002832:	1b64      	subs	r4, r4, r5
 8002834:	10a4      	asrs	r4, r4, #2
 8002836:	2600      	movs	r6, #0
 8002838:	42a6      	cmp	r6, r4
 800283a:	d109      	bne.n	8002850 <__libc_init_array+0x24>
 800283c:	4d0b      	ldr	r5, [pc, #44]	; (800286c <__libc_init_array+0x40>)
 800283e:	4c0c      	ldr	r4, [pc, #48]	; (8002870 <__libc_init_array+0x44>)
 8002840:	f000 f818 	bl	8002874 <_init>
 8002844:	1b64      	subs	r4, r4, r5
 8002846:	10a4      	asrs	r4, r4, #2
 8002848:	2600      	movs	r6, #0
 800284a:	42a6      	cmp	r6, r4
 800284c:	d105      	bne.n	800285a <__libc_init_array+0x2e>
 800284e:	bd70      	pop	{r4, r5, r6, pc}
 8002850:	f855 3b04 	ldr.w	r3, [r5], #4
 8002854:	4798      	blx	r3
 8002856:	3601      	adds	r6, #1
 8002858:	e7ee      	b.n	8002838 <__libc_init_array+0xc>
 800285a:	f855 3b04 	ldr.w	r3, [r5], #4
 800285e:	4798      	blx	r3
 8002860:	3601      	adds	r6, #1
 8002862:	e7f2      	b.n	800284a <__libc_init_array+0x1e>
 8002864:	08002904 	.word	0x08002904
 8002868:	08002904 	.word	0x08002904
 800286c:	08002904 	.word	0x08002904
 8002870:	08002908 	.word	0x08002908

08002874 <_init>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	bf00      	nop
 8002878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287a:	bc08      	pop	{r3}
 800287c:	469e      	mov	lr, r3
 800287e:	4770      	bx	lr

08002880 <_fini>:
 8002880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002882:	bf00      	nop
 8002884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002886:	bc08      	pop	{r3}
 8002888:	469e      	mov	lr, r3
 800288a:	4770      	bx	lr
