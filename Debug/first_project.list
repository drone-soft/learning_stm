
first_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c08  08003c08  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c10  08003c10  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00003fd4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003fe4  20003fe4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   000094cc  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e43  00000000  00000000  0002954f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000960  00000000  00000000  0002b398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000702  00000000  00000000  0002bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020939  00000000  00000000  0002c3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a778  00000000  00000000  0004cd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8008  00000000  00000000  000574ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000024ac  00000000  00000000  0011f4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00121960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b90 	.word	0x08003b90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003b90 	.word	0x08003b90

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80004dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	4a06      	ldr	r2, [pc, #24]	; (80004fc <vApplicationGetIdleTaskMemory+0x30>)
 80004e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	2000002c 	.word	0x2000002c
 80004fc:	20000080 	.word	0x20000080

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b090      	sub	sp, #64	; 0x40
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 f9f3 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f86f 	bl	80005ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;//enabling A port clock
 800050e:	4b2f      	ldr	r3, [pc, #188]	; (80005cc <main+0xcc>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a2e      	ldr	r2, [pc, #184]	; (80005cc <main+0xcc>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;//enabling E port clock
 800051a:	4b2c      	ldr	r3, [pc, #176]	; (80005cc <main+0xcc>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a2b      	ldr	r2, [pc, #172]	; (80005cc <main+0xcc>)
 8000520:	f043 0310 	orr.w	r3, r3, #16
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOA->MODER |= GPIO_MODER_MODE6_0;
 8000526:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <main+0xd0>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a29      	ldr	r2, [pc, #164]	; (80005d0 <main+0xd0>)
 800052c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000530:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE7_0;
 8000532:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <main+0xd0>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a26      	ldr	r2, [pc, #152]	; (80005d0 <main+0xd0>)
 8000538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053c:	6013      	str	r3, [r2, #0]
  GPIOE->PUPDR |= GPIO_PUPDR_PUPD4_0 | GPIO_PUPDR_PUPD3_0;
 800053e:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <main+0xd4>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	4a24      	ldr	r2, [pc, #144]	; (80005d4 <main+0xd4>)
 8000544:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8000548:	60d3      	str	r3, [r2, #12]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  //Sets LEDs to be turned of at the start
  GPIOA->BSRR |= GPIO_BSRR_BS7;
 800054a:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <main+0xd0>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <main+0xd0>)
 8000550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000554:	6193      	str	r3, [r2, #24]
  GPIOA->BSRR |= GPIO_BSRR_BS6;
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <main+0xd0>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	4a1d      	ldr	r2, [pc, #116]	; (80005d0 <main+0xd0>)
 800055c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000560:	6193      	str	r3, [r2, #24]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of ButtonTasksSemaphore */
  osSemaphoreDef(ButtonTasksSemaphore);
 8000562:	2300      	movs	r3, #0
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
 8000566:	2300      	movs	r3, #0
 8000568:	63fb      	str	r3, [r7, #60]	; 0x3c
  ButtonTasksSemaphoreHandle = osSemaphoreCreate(osSemaphore(ButtonTasksSemaphore), 1);
 800056a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800056e:	2101      	movs	r1, #1
 8000570:	4618      	mov	r0, r3
 8000572:	f000 ffca 	bl	800150a <osSemaphoreCreate>
 8000576:	4603      	mov	r3, r0
 8000578:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <main+0xd8>)
 800057a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_K0 */
  osThreadDef(Task_K0, StartTask_K0, osPriorityNormal, 0, 128);
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <main+0xdc>)
 800057e:	f107 041c 	add.w	r4, r7, #28
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_K0Handle = osThreadCreate(osThread(Task_K0), NULL);
 8000590:	f107 031c 	add.w	r3, r7, #28
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f000 ff57 	bl	800144a <osThreadCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <main+0xe0>)
 80005a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_K1 */
  osThreadDef(Task_K1, StartTask_K1, osPriorityNormal, 0, 128);
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <main+0xe4>)
 80005a4:	463c      	mov	r4, r7
 80005a6:	461d      	mov	r5, r3
 80005a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_K1Handle = osThreadCreate(osThread(Task_K1), NULL);
 80005b4:	463b      	mov	r3, r7
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 ff46 	bl	800144a <osThreadCreate>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <main+0xe8>)
 80005c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005c4:	f000 ff3a 	bl	800143c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <main+0xc8>
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40020000 	.word	0x40020000
 80005d4:	40021000 	.word	0x40021000
 80005d8:	20000288 	.word	0x20000288
 80005dc:	08003bb0 	.word	0x08003bb0
 80005e0:	20000280 	.word	0x20000280
 80005e4:	08003bd4 	.word	0x08003bd4
 80005e8:	20000284 	.word	0x20000284

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fa8e 	bl	8003b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd0>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000660:	23a8      	movs	r3, #168	; 0xa8
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fa95 	bl	8000ba0 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800067c:	f000 f8a6 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2105      	movs	r1, #5
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fcf6 	bl	8001090 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006aa:	f000 f88f 	bl	80007cc <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <StartTask_K0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartTask_K0(void const * argument)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t tickstart;
	uint32_t wait = 3000;
 80006c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006cc:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	 for(;;)
	  {
			  if ( (~(GPIOE->IDR) & GPIO_IDR_ID4) &&
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <StartTask_K0+0x7c>)
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	f003 0310 	and.w	r3, r3, #16
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d12c      	bne.n	8000734 <StartTask_K0+0x74>
					  !osSemaphoreWait(ButtonTasksSemaphoreHandle , osWaitForever))
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <StartTask_K0+0x80>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f04f 31ff 	mov.w	r1, #4294967295
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 ff44 	bl	8001570 <osSemaphoreWait>
 80006e8:	4603      	mov	r3, r0
			  if ( (~(GPIOE->IDR) & GPIO_IDR_ID4) &&
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d122      	bne.n	8000734 <StartTask_K0+0x74>
			  {
				  //turning on the led
				  GPIOA->BSRR |= GPIO_BSRR_BR6;
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <StartTask_K0+0x84>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	4a14      	ldr	r2, [pc, #80]	; (8000744 <StartTask_K0+0x84>)
 80006f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f8:	6193      	str	r3, [r2, #24]
				  osSemaphoreRelease(ButtonTasksSemaphoreHandle);
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <StartTask_K0+0x80>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 ff84 	bl	800160c <osSemaphoreRelease>
				  //turning on the led

				  //waiting
//				  tickstart = HAL_GetTick();
//				  while((HAL_GetTick() - tickstart) < wait) {}
				  osDelay(wait);
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f000 feec 	bl	80014e2 <osDelay>
				  //waiting

				  //turning off the led
				  while(1){
					  if (!osSemaphoreWait(ButtonTasksSemaphoreHandle , osWaitForever)){
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <StartTask_K0+0x80>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f04f 31ff 	mov.w	r1, #4294967295
 8000712:	4618      	mov	r0, r3
 8000714:	f000 ff2c 	bl	8001570 <osSemaphoreWait>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f5      	bne.n	800070a <StartTask_K0+0x4a>
						  GPIOA->BSRR |= GPIO_BSRR_BS6;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <StartTask_K0+0x84>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <StartTask_K0+0x84>)
 8000724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000728:	6193      	str	r3, [r2, #24]
						  osSemaphoreRelease(ButtonTasksSemaphoreHandle);
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <StartTask_K0+0x80>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f000 ff6c 	bl	800160c <osSemaphoreRelease>
					  }
				  }
				  //turning off the led
			  }

		  osDelay(10);
 8000734:	200a      	movs	r0, #10
 8000736:	f000 fed4 	bl	80014e2 <osDelay>
			  if ( (~(GPIOE->IDR) & GPIO_IDR_ID4) &&
 800073a:	e7c8      	b.n	80006ce <StartTask_K0+0xe>
 800073c:	40021000 	.word	0x40021000
 8000740:	20000288 	.word	0x20000288
 8000744:	40020000 	.word	0x40020000

08000748 <StartTask_K1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask_K1(void const * argument)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	uint32_t wait = 3000;
 8000750:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000754:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	  //Button K1
		  if ( (~(GPIOE->IDR) & GPIO_IDR_ID3) &&
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <StartTask_K1+0x78>)
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	f003 0308 	and.w	r3, r3, #8
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1f9      	bne.n	8000756 <StartTask_K1+0xe>
				  !osSemaphoreWait(ButtonTasksSemaphoreHandle , osWaitForever))
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <StartTask_K1+0x7c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f04f 31ff 	mov.w	r1, #4294967295
 800076a:	4618      	mov	r0, r3
 800076c:	f000 ff00 	bl	8001570 <osSemaphoreWait>
 8000770:	4603      	mov	r3, r0
		  if ( (~(GPIOE->IDR) & GPIO_IDR_ID3) &&
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1ef      	bne.n	8000756 <StartTask_K1+0xe>
		  {
			  GPIOA->BSRR |= GPIO_BSRR_BR7;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <StartTask_K1+0x80>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <StartTask_K1+0x80>)
 800077c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000780:	6193      	str	r3, [r2, #24]
			  osSemaphoreRelease(ButtonTasksSemaphoreHandle);
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <StartTask_K1+0x7c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 ff40 	bl	800160c <osSemaphoreRelease>

			  osDelay(wait);
 800078c:	68f8      	ldr	r0, [r7, #12]
 800078e:	f000 fea8 	bl	80014e2 <osDelay>

			  while(1) {
				  if (!osSemaphoreWait(ButtonTasksSemaphoreHandle , osWaitForever)){
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <StartTask_K1+0x7c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f04f 31ff 	mov.w	r1, #4294967295
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fee8 	bl	8001570 <osSemaphoreWait>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f5      	bne.n	8000792 <StartTask_K1+0x4a>
					  GPIOA->BSRR |= GPIO_BSRR_BS7;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <StartTask_K1+0x80>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <StartTask_K1+0x80>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6193      	str	r3, [r2, #24]
					  osSemaphoreRelease(ButtonTasksSemaphoreHandle);
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <StartTask_K1+0x7c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 ff28 	bl	800160c <osSemaphoreRelease>
					  break;
 80007bc:	bf00      	nop
		  if ( (~(GPIOE->IDR) & GPIO_IDR_ID3) &&
 80007be:	e7ca      	b.n	8000756 <StartTask_K1+0xe>
 80007c0:	40021000 	.word	0x40021000
 80007c4:	20000288 	.word	0x20000288
 80007c8:	40020000 	.word	0x40020000

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_MspInit+0x54>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a11      	ldr	r2, [pc, #68]	; (800082c <HAL_MspInit+0x54>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_MspInit+0x54>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <HAL_MspInit+0x54>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_MspInit+0x54>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_MspInit+0x54>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	210f      	movs	r1, #15
 800081a:	f06f 0001 	mvn.w	r0, #1
 800081e:	f000 f996 	bl	8000b4e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000860:	f000 f898 	bl	8000994 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000864:	f002 fafc 	bl	8002e60 <xTaskGetSchedulerState>
 8000868:	4603      	mov	r3, r0
 800086a:	2b01      	cmp	r3, #1
 800086c:	d001      	beq.n	8000872 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800086e:	f002 fedb 	bl	8003628 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <SystemInit+0x20>)
 800087e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <SystemInit+0x20>)
 8000884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800089c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008a2:	490e      	ldr	r1, [pc, #56]	; (80008dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008a4:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008b8:	4c0b      	ldr	r4, [pc, #44]	; (80008e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008c6:	f7ff ffd7 	bl	8000878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ca:	f003 f92f 	bl	8003b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ce:	f7ff fe17 	bl	8000500 <main>
  bx  lr    
 80008d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008e0:	08003c18 	.word	0x08003c18
  ldr r2, =_sbss
 80008e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008e8:	20003fe4 	.word	0x20003fe4

080008ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC_IRQHandler>
	...

080008f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <HAL_Init+0x40>)
 80008fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_Init+0x40>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_Init+0x40>)
 8000912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f90d 	bl	8000b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091e:	200f      	movs	r0, #15
 8000920:	f000 f808 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f7ff ff58 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023c00 	.word	0x40023c00

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x54>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x58>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f917 	bl	8000b86 <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 f8ed 	bl	8000b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_InitTick+0x5c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000000 	.word	0x20000000
 800098c:	20000008 	.word	0x20000008
 8000990:	20000004 	.word	0x20000004

08000994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_IncTick+0x20>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_IncTick+0x24>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_IncTick+0x24>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008
 80009b8:	2000028c 	.word	0x2000028c

080009bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <HAL_GetTick+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	2000028c 	.word	0x2000028c

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b04:	d301      	bcc.n	8000b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00f      	b.n	8000b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <SysTick_Config+0x40>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b12:	210f      	movs	r1, #15
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f7ff ff8e 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <SysTick_Config+0x40>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <SysTick_Config+0x40>)
 8000b24:	2207      	movs	r2, #7
 8000b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	e000e010 	.word	0xe000e010

08000b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff47 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b60:	f7ff ff5c 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	6978      	ldr	r0, [r7, #20]
 8000b6c:	f7ff ff8e 	bl	8000a8c <NVIC_EncodePriority>
 8000b70:	4602      	mov	r2, r0
 8000b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff5d 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ffb0 	bl	8000af4 <SysTick_Config>
 8000b94:	4603      	mov	r3, r0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e267      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d075      	beq.n	8000caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bbe:	4b88      	ldr	r3, [pc, #544]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f003 030c 	and.w	r3, r3, #12
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d00c      	beq.n	8000be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bca:	4b85      	ldr	r3, [pc, #532]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bd2:	2b08      	cmp	r3, #8
 8000bd4:	d112      	bne.n	8000bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bd6:	4b82      	ldr	r3, [pc, #520]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000be2:	d10b      	bne.n	8000bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be4:	4b7e      	ldr	r3, [pc, #504]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d05b      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x108>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d157      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e242      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c04:	d106      	bne.n	8000c14 <HAL_RCC_OscConfig+0x74>
 8000c06:	4b76      	ldr	r3, [pc, #472]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a75      	ldr	r2, [pc, #468]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e01d      	b.n	8000c50 <HAL_RCC_OscConfig+0xb0>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c1c:	d10c      	bne.n	8000c38 <HAL_RCC_OscConfig+0x98>
 8000c1e:	4b70      	ldr	r3, [pc, #448]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a6f      	ldr	r2, [pc, #444]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	4b6d      	ldr	r3, [pc, #436]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a6c      	ldr	r2, [pc, #432]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	e00b      	b.n	8000c50 <HAL_RCC_OscConfig+0xb0>
 8000c38:	4b69      	ldr	r3, [pc, #420]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a68      	ldr	r2, [pc, #416]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	4b66      	ldr	r3, [pc, #408]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a65      	ldr	r2, [pc, #404]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d013      	beq.n	8000c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c58:	f7ff feb0 	bl	80009bc <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c60:	f7ff feac 	bl	80009bc <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b64      	cmp	r3, #100	; 0x64
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e207      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c72:	4b5b      	ldr	r3, [pc, #364]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0f0      	beq.n	8000c60 <HAL_RCC_OscConfig+0xc0>
 8000c7e:	e014      	b.n	8000caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c80:	f7ff fe9c 	bl	80009bc <HAL_GetTick>
 8000c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c86:	e008      	b.n	8000c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c88:	f7ff fe98 	bl	80009bc <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b64      	cmp	r3, #100	; 0x64
 8000c94:	d901      	bls.n	8000c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e1f3      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9a:	4b51      	ldr	r3, [pc, #324]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f0      	bne.n	8000c88 <HAL_RCC_OscConfig+0xe8>
 8000ca6:	e000      	b.n	8000caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d063      	beq.n	8000d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cb6:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	f003 030c 	and.w	r3, r3, #12
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00b      	beq.n	8000cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cc2:	4b47      	ldr	r3, [pc, #284]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cca:	2b08      	cmp	r3, #8
 8000ccc:	d11c      	bne.n	8000d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cce:	4b44      	ldr	r3, [pc, #272]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d116      	bne.n	8000d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cda:	4b41      	ldr	r3, [pc, #260]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d005      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x152>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d001      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e1c7      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf2:	4b3b      	ldr	r3, [pc, #236]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	4937      	ldr	r1, [pc, #220]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d06:	e03a      	b.n	8000d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d020      	beq.n	8000d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d10:	4b34      	ldr	r3, [pc, #208]	; (8000de4 <HAL_RCC_OscConfig+0x244>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d16:	f7ff fe51 	bl	80009bc <HAL_GetTick>
 8000d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	e008      	b.n	8000d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d1e:	f7ff fe4d 	bl	80009bc <HAL_GetTick>
 8000d22:	4602      	mov	r2, r0
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d901      	bls.n	8000d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e1a8      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f0      	beq.n	8000d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	4925      	ldr	r1, [pc, #148]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	600b      	str	r3, [r1, #0]
 8000d50:	e015      	b.n	8000d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d52:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <HAL_RCC_OscConfig+0x244>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d58:	f7ff fe30 	bl	80009bc <HAL_GetTick>
 8000d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5e:	e008      	b.n	8000d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d60:	f7ff fe2c 	bl	80009bc <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e187      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1f0      	bne.n	8000d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d036      	beq.n	8000df8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d016      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_RCC_OscConfig+0x248>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d98:	f7ff fe10 	bl	80009bc <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000da0:	f7ff fe0c 	bl	80009bc <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e167      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f0      	beq.n	8000da0 <HAL_RCC_OscConfig+0x200>
 8000dbe:	e01b      	b.n	8000df8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_RCC_OscConfig+0x248>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fdf9 	bl	80009bc <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dcc:	e00e      	b.n	8000dec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dce:	f7ff fdf5 	bl	80009bc <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d907      	bls.n	8000dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e150      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
 8000de0:	40023800 	.word	0x40023800
 8000de4:	42470000 	.word	0x42470000
 8000de8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dec:	4b88      	ldr	r3, [pc, #544]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1ea      	bne.n	8000dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 8097 	beq.w	8000f34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e0a:	4b81      	ldr	r3, [pc, #516]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10f      	bne.n	8000e36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	4b7d      	ldr	r3, [pc, #500]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a7c      	ldr	r2, [pc, #496]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b7a      	ldr	r3, [pc, #488]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e32:	2301      	movs	r3, #1
 8000e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e36:	4b77      	ldr	r3, [pc, #476]	; (8001014 <HAL_RCC_OscConfig+0x474>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d118      	bne.n	8000e74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e42:	4b74      	ldr	r3, [pc, #464]	; (8001014 <HAL_RCC_OscConfig+0x474>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a73      	ldr	r2, [pc, #460]	; (8001014 <HAL_RCC_OscConfig+0x474>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fdb5 	bl	80009bc <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e56:	f7ff fdb1 	bl	80009bc <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e10c      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e68:	4b6a      	ldr	r3, [pc, #424]	; (8001014 <HAL_RCC_OscConfig+0x474>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d106      	bne.n	8000e8a <HAL_RCC_OscConfig+0x2ea>
 8000e7c:	4b64      	ldr	r3, [pc, #400]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e80:	4a63      	ldr	r2, [pc, #396]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6713      	str	r3, [r2, #112]	; 0x70
 8000e88:	e01c      	b.n	8000ec4 <HAL_RCC_OscConfig+0x324>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	2b05      	cmp	r3, #5
 8000e90:	d10c      	bne.n	8000eac <HAL_RCC_OscConfig+0x30c>
 8000e92:	4b5f      	ldr	r3, [pc, #380]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e96:	4a5e      	ldr	r2, [pc, #376]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e9e:	4b5c      	ldr	r3, [pc, #368]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea2:	4a5b      	ldr	r2, [pc, #364]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eaa:	e00b      	b.n	8000ec4 <HAL_RCC_OscConfig+0x324>
 8000eac:	4b58      	ldr	r3, [pc, #352]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb0:	4a57      	ldr	r2, [pc, #348]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000eb2:	f023 0301 	bic.w	r3, r3, #1
 8000eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8000eb8:	4b55      	ldr	r3, [pc, #340]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ebc:	4a54      	ldr	r2, [pc, #336]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000ebe:	f023 0304 	bic.w	r3, r3, #4
 8000ec2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d015      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ecc:	f7ff fd76 	bl	80009bc <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed2:	e00a      	b.n	8000eea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed4:	f7ff fd72 	bl	80009bc <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e0cb      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eea:	4b49      	ldr	r3, [pc, #292]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0ee      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x334>
 8000ef6:	e014      	b.n	8000f22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef8:	f7ff fd60 	bl	80009bc <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000efe:	e00a      	b.n	8000f16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f00:	f7ff fd5c 	bl	80009bc <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e0b5      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f16:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1ee      	bne.n	8000f00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d105      	bne.n	8000f34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f28:	4b39      	ldr	r3, [pc, #228]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a38      	ldr	r2, [pc, #224]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80a1 	beq.w	8001080 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b08      	cmp	r3, #8
 8000f48:	d05c      	beq.n	8001004 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d141      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f52:	4b31      	ldr	r3, [pc, #196]	; (8001018 <HAL_RCC_OscConfig+0x478>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fd30 	bl	80009bc <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f60:	f7ff fd2c 	bl	80009bc <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e087      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f72:	4b27      	ldr	r3, [pc, #156]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69da      	ldr	r2, [r3, #28]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	019b      	lsls	r3, r3, #6
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f94:	085b      	lsrs	r3, r3, #1
 8000f96:	3b01      	subs	r3, #1
 8000f98:	041b      	lsls	r3, r3, #16
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	061b      	lsls	r3, r3, #24
 8000fa2:	491b      	ldr	r1, [pc, #108]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_RCC_OscConfig+0x478>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fd05 	bl	80009bc <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb6:	f7ff fd01 	bl	80009bc <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e05c      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x416>
 8000fd4:	e054      	b.n	8001080 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_RCC_OscConfig+0x478>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fcee 	bl	80009bc <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe4:	f7ff fcea 	bl	80009bc <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e045      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x444>
 8001002:	e03d      	b.n	8001080 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d107      	bne.n	800101c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e038      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000
 8001018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_RCC_OscConfig+0x4ec>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d028      	beq.n	800107c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001034:	429a      	cmp	r2, r3
 8001036:	d121      	bne.n	800107c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001042:	429a      	cmp	r2, r3
 8001044:	d11a      	bne.n	800107c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800104c:	4013      	ands	r3, r2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001054:	4293      	cmp	r3, r2
 8001056:	d111      	bne.n	800107c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	085b      	lsrs	r3, r3, #1
 8001064:	3b01      	subs	r3, #1
 8001066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001068:	429a      	cmp	r2, r3
 800106a:	d107      	bne.n	800107c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001078:	429a      	cmp	r2, r3
 800107a:	d001      	beq.n	8001080 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800

08001090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0cc      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010a4:	4b68      	ldr	r3, [pc, #416]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d90c      	bls.n	80010cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b2:	4b65      	ldr	r3, [pc, #404]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ba:	4b63      	ldr	r3, [pc, #396]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d001      	beq.n	80010cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0b8      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d020      	beq.n	800111a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e4:	4b59      	ldr	r3, [pc, #356]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4a58      	ldr	r2, [pc, #352]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010fc:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4a52      	ldr	r2, [pc, #328]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001108:	4b50      	ldr	r3, [pc, #320]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	494d      	ldr	r1, [pc, #308]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001116:	4313      	orrs	r3, r2
 8001118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d044      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d107      	bne.n	800113e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d119      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e07f      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d003      	beq.n	800114e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800114a:	2b03      	cmp	r3, #3
 800114c:	d107      	bne.n	800115e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d109      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e06f      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e067      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f023 0203 	bic.w	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4934      	ldr	r1, [pc, #208]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	4313      	orrs	r3, r2
 800117e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001180:	f7ff fc1c 	bl	80009bc <HAL_GetTick>
 8001184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001186:	e00a      	b.n	800119e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001188:	f7ff fc18 	bl	80009bc <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	f241 3288 	movw	r2, #5000	; 0x1388
 8001196:	4293      	cmp	r3, r2
 8001198:	d901      	bls.n	800119e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e04f      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 020c 	and.w	r2, r3, #12
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d1eb      	bne.n	8001188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d20c      	bcs.n	80011d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d001      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e032      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d008      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4916      	ldr	r1, [pc, #88]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	490e      	ldr	r1, [pc, #56]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001212:	4313      	orrs	r3, r2
 8001214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001216:	f000 f821 	bl	800125c <HAL_RCC_GetSysClockFreq>
 800121a:	4602      	mov	r2, r0
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	490a      	ldr	r1, [pc, #40]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	5ccb      	ldrb	r3, [r1, r3]
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_RCC_ClockConfig+0x1c8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fb7c 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023c00 	.word	0x40023c00
 800124c:	40023800 	.word	0x40023800
 8001250:	08003bf8 	.word	0x08003bf8
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800125c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001260:	b090      	sub	sp, #64	; 0x40
 8001262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
 8001268:	2300      	movs	r3, #0
 800126a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001274:	4b59      	ldr	r3, [pc, #356]	; (80013dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d00d      	beq.n	800129c <HAL_RCC_GetSysClockFreq+0x40>
 8001280:	2b08      	cmp	r3, #8
 8001282:	f200 80a1 	bhi.w	80013c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <HAL_RCC_GetSysClockFreq+0x34>
 800128a:	2b04      	cmp	r3, #4
 800128c:	d003      	beq.n	8001296 <HAL_RCC_GetSysClockFreq+0x3a>
 800128e:	e09b      	b.n	80013c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001290:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001292:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001294:	e09b      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001296:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001298:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800129a:	e098      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800129c:	4b4f      	ldr	r3, [pc, #316]	; (80013dc <HAL_RCC_GetSysClockFreq+0x180>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012a6:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <HAL_RCC_GetSysClockFreq+0x180>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d028      	beq.n	8001304 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b2:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <HAL_RCC_GetSysClockFreq+0x180>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	099b      	lsrs	r3, r3, #6
 80012b8:	2200      	movs	r2, #0
 80012ba:	623b      	str	r3, [r7, #32]
 80012bc:	627a      	str	r2, [r7, #36]	; 0x24
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80012c4:	2100      	movs	r1, #0
 80012c6:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80012c8:	fb03 f201 	mul.w	r2, r3, r1
 80012cc:	2300      	movs	r3, #0
 80012ce:	fb00 f303 	mul.w	r3, r0, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	4a43      	ldr	r2, [pc, #268]	; (80013e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80012d6:	fba0 1202 	umull	r1, r2, r0, r2
 80012da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012dc:	460a      	mov	r2, r1
 80012de:	62ba      	str	r2, [r7, #40]	; 0x28
 80012e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e2:	4413      	add	r3, r2
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e8:	2200      	movs	r2, #0
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	61fa      	str	r2, [r7, #28]
 80012ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012f6:	f7fe ff6b 	bl	80001d0 <__aeabi_uldivmod>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4613      	mov	r3, r2
 8001300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001302:	e053      	b.n	80013ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001304:	4b35      	ldr	r3, [pc, #212]	; (80013dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	099b      	lsrs	r3, r3, #6
 800130a:	2200      	movs	r2, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	617a      	str	r2, [r7, #20]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001316:	f04f 0b00 	mov.w	fp, #0
 800131a:	4652      	mov	r2, sl
 800131c:	465b      	mov	r3, fp
 800131e:	f04f 0000 	mov.w	r0, #0
 8001322:	f04f 0100 	mov.w	r1, #0
 8001326:	0159      	lsls	r1, r3, #5
 8001328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800132c:	0150      	lsls	r0, r2, #5
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	ebb2 080a 	subs.w	r8, r2, sl
 8001336:	eb63 090b 	sbc.w	r9, r3, fp
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001346:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800134a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800134e:	ebb2 0408 	subs.w	r4, r2, r8
 8001352:	eb63 0509 	sbc.w	r5, r3, r9
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	00eb      	lsls	r3, r5, #3
 8001360:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001364:	00e2      	lsls	r2, r4, #3
 8001366:	4614      	mov	r4, r2
 8001368:	461d      	mov	r5, r3
 800136a:	eb14 030a 	adds.w	r3, r4, sl
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	eb45 030b 	adc.w	r3, r5, fp
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001382:	4629      	mov	r1, r5
 8001384:	028b      	lsls	r3, r1, #10
 8001386:	4621      	mov	r1, r4
 8001388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800138c:	4621      	mov	r1, r4
 800138e:	028a      	lsls	r2, r1, #10
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001396:	2200      	movs	r2, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	60fa      	str	r2, [r7, #12]
 800139c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013a0:	f7fe ff16 	bl	80001d0 <__aeabi_uldivmod>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4613      	mov	r3, r2
 80013aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_RCC_GetSysClockFreq+0x180>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	0c1b      	lsrs	r3, r3, #16
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	3301      	adds	r3, #1
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80013bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80013c6:	e002      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80013ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80013cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3740      	adds	r7, #64	; 0x40
 80013d4:	46bd      	mov	sp, r7
 80013d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	00f42400 	.word	0x00f42400
 80013e4:	017d7840 	.word	0x017d7840

080013e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80013f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fa:	2b84      	cmp	r3, #132	; 0x84
 80013fc:	d005      	beq.n	800140a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80013fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4413      	add	r3, r2
 8001406:	3303      	adds	r3, #3
 8001408:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800141e:	f3ef 8305 	mrs	r3, IPSR
 8001422:	607b      	str	r3, [r7, #4]
  return(result);
 8001424:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001426:	2b00      	cmp	r3, #0
 8001428:	bf14      	ite	ne
 800142a:	2301      	movne	r3, #1
 800142c:	2300      	moveq	r3, #0
 800142e:	b2db      	uxtb	r3, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001440:	f001 f910 	bl	8002664 <vTaskStartScheduler>
  
  return osOK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}

0800144a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800144a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144c:	b089      	sub	sp, #36	; 0x24
 800144e:	af04      	add	r7, sp, #16
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d020      	beq.n	800149e <osThreadCreate+0x54>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d01c      	beq.n	800149e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685c      	ldr	r4, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691e      	ldr	r6, [r3, #16]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ffb6 	bl	80013e8 <makeFreeRtosPriority>
 800147c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001486:	9202      	str	r2, [sp, #8]
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	9100      	str	r1, [sp, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	4632      	mov	r2, r6
 8001490:	4629      	mov	r1, r5
 8001492:	4620      	mov	r0, r4
 8001494:	f000 ff1e 	bl	80022d4 <xTaskCreateStatic>
 8001498:	4603      	mov	r3, r0
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	e01c      	b.n	80014d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685c      	ldr	r4, [r3, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014aa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff98 	bl	80013e8 <makeFreeRtosPriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	9200      	str	r2, [sp, #0]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	4632      	mov	r2, r6
 80014c6:	4629      	mov	r1, r5
 80014c8:	4620      	mov	r0, r4
 80014ca:	f000 ff60 	bl	800238e <xTaskCreate>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d001      	beq.n	80014d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e000      	b.n	80014da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80014d8:	68fb      	ldr	r3, [r7, #12]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <osDelay+0x16>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	e000      	b.n	80014fa <osDelay+0x18>
 80014f8:	2301      	movs	r3, #1
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 f87e 	bl	80025fc <vTaskDelay>
  
  return osOK;
 8001500:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af02      	add	r7, sp, #8
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00f      	beq.n	800153c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d10a      	bne.n	8001538 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2203      	movs	r2, #3
 8001528:	9200      	str	r2, [sp, #0]
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2001      	movs	r0, #1
 8001530:	f000 f9be 	bl	80018b0 <xQueueGenericCreateStatic>
 8001534:	4603      	mov	r3, r0
 8001536:	e016      	b.n	8001566 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001538:	2300      	movs	r3, #0
 800153a:	e014      	b.n	8001566 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d110      	bne.n	8001564 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8001542:	2203      	movs	r2, #3
 8001544:	2100      	movs	r1, #0
 8001546:	2001      	movs	r0, #1
 8001548:	f000 fa2a 	bl	80019a0 <xQueueGenericCreate>
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <osSemaphoreCreate+0x56>
 8001554:	2300      	movs	r3, #0
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 fa7a 	bl	8001a54 <xQueueGenericSend>
      return sema;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	e000      	b.n	8001566 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8001564:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	e03a      	b.n	80015fe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001592:	d103      	bne.n	800159c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	e009      	b.n	80015b0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d006      	beq.n	80015b0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <osSemaphoreWait+0x40>
      ticks = 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80015b0:	f7ff ff32 	bl	8001418 <inHandlerMode>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d017      	beq.n	80015ea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	461a      	mov	r2, r3
 80015c0:	2100      	movs	r1, #0
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 fcde 	bl	8001f84 <xQueueReceiveFromISR>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d001      	beq.n	80015d2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80015ce:	23ff      	movs	r3, #255	; 0xff
 80015d0:	e015      	b.n	80015fe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d011      	beq.n	80015fc <osSemaphoreWait+0x8c>
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <osSemaphoreWait+0x98>)
 80015da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	f3bf 8f4f 	dsb	sy
 80015e4:	f3bf 8f6f 	isb	sy
 80015e8:	e008      	b.n	80015fc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80015ea:	68f9      	ldr	r1, [r7, #12]
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 fbbd 	bl	8001d6c <xQueueSemaphoreTake>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d001      	beq.n	80015fc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80015f8:	23ff      	movs	r3, #255	; 0xff
 80015fa:	e000      	b.n	80015fe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	e000ed04 	.word	0xe000ed04

0800160c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800161c:	f7ff fefc 	bl	8001418 <inHandlerMode>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d016      	beq.n	8001654 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	4619      	mov	r1, r3
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fb0f 	bl	8001c50 <xQueueGiveFromISR>
 8001632:	4603      	mov	r3, r0
 8001634:	2b01      	cmp	r3, #1
 8001636:	d001      	beq.n	800163c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8001638:	23ff      	movs	r3, #255	; 0xff
 800163a:	e017      	b.n	800166c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d013      	beq.n	800166a <osSemaphoreRelease+0x5e>
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <osSemaphoreRelease+0x68>)
 8001644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	f3bf 8f4f 	dsb	sy
 800164e:	f3bf 8f6f 	isb	sy
 8001652:	e00a      	b.n	800166a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001654:	2300      	movs	r3, #0
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f9fa 	bl	8001a54 <xQueueGenericSend>
 8001660:	4603      	mov	r3, r0
 8001662:	2b01      	cmp	r3, #1
 8001664:	d001      	beq.n	800166a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8001666:	23ff      	movs	r3, #255	; 0xff
 8001668:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	e000ed04 	.word	0xe000ed04

08001678 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f103 0208 	add.w	r2, r3, #8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f103 0208 	add.w	r2, r3, #8
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f103 0208 	add.w	r2, r3, #8
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	601a      	str	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d103      	bne.n	800173a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e00c      	b.n	8001754 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3308      	adds	r3, #8
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e002      	b.n	8001748 <vListInsert+0x2e>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	429a      	cmp	r2, r3
 8001752:	d2f6      	bcs.n	8001742 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	601a      	str	r2, [r3, #0]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6892      	ldr	r2, [r2, #8]
 80017a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6852      	ldr	r2, [r2, #4]
 80017ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d103      	bne.n	80017c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	1e5a      	subs	r2, r3, #1
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10a      	bne.n	800180a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f8:	f383 8811 	msr	BASEPRI, r3
 80017fc:	f3bf 8f6f 	isb	sy
 8001800:	f3bf 8f4f 	dsb	sy
 8001804:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001806:	bf00      	nop
 8001808:	e7fe      	b.n	8001808 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800180a:	f001 fe7b 	bl	8003504 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001816:	68f9      	ldr	r1, [r7, #12]
 8001818:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	441a      	add	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183a:	3b01      	subs	r3, #1
 800183c:	68f9      	ldr	r1, [r7, #12]
 800183e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	441a      	add	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	22ff      	movs	r2, #255	; 0xff
 800184e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	22ff      	movs	r2, #255	; 0xff
 8001856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d114      	bne.n	800188a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01a      	beq.n	800189e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3310      	adds	r3, #16
 800186c:	4618      	mov	r0, r3
 800186e:	f001 f93b 	bl	8002ae8 <xTaskRemoveFromEventList>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d012      	beq.n	800189e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <xQueueGenericReset+0xcc>)
 800187a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	f3bf 8f4f 	dsb	sy
 8001884:	f3bf 8f6f 	isb	sy
 8001888:	e009      	b.n	800189e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3310      	adds	r3, #16
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fef2 	bl	8001678 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3324      	adds	r3, #36	; 0x24
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff feed 	bl	8001678 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800189e:	f001 fe61 	bl	8003564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	e000ed04 	.word	0xe000ed04

080018b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08e      	sub	sp, #56	; 0x38
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10a      	bne.n	80018da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80018c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c8:	f383 8811 	msr	BASEPRI, r3
 80018cc:	f3bf 8f6f 	isb	sy
 80018d0:	f3bf 8f4f 	dsb	sy
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80018d6:	bf00      	nop
 80018d8:	e7fe      	b.n	80018d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10a      	bne.n	80018f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80018e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e4:	f383 8811 	msr	BASEPRI, r3
 80018e8:	f3bf 8f6f 	isb	sy
 80018ec:	f3bf 8f4f 	dsb	sy
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80018f2:	bf00      	nop
 80018f4:	e7fe      	b.n	80018f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <xQueueGenericCreateStatic+0x52>
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <xQueueGenericCreateStatic+0x56>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <xQueueGenericCreateStatic+0x58>
 8001906:	2300      	movs	r3, #0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10a      	bne.n	8001922 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800190c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001910:	f383 8811 	msr	BASEPRI, r3
 8001914:	f3bf 8f6f 	isb	sy
 8001918:	f3bf 8f4f 	dsb	sy
 800191c:	623b      	str	r3, [r7, #32]
}
 800191e:	bf00      	nop
 8001920:	e7fe      	b.n	8001920 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <xQueueGenericCreateStatic+0x7e>
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <xQueueGenericCreateStatic+0x82>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <xQueueGenericCreateStatic+0x84>
 8001932:	2300      	movs	r3, #0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10a      	bne.n	800194e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800193c:	f383 8811 	msr	BASEPRI, r3
 8001940:	f3bf 8f6f 	isb	sy
 8001944:	f3bf 8f4f 	dsb	sy
 8001948:	61fb      	str	r3, [r7, #28]
}
 800194a:	bf00      	nop
 800194c:	e7fe      	b.n	800194c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800194e:	2348      	movs	r3, #72	; 0x48
 8001950:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2b48      	cmp	r3, #72	; 0x48
 8001956:	d00a      	beq.n	800196e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800195c:	f383 8811 	msr	BASEPRI, r3
 8001960:	f3bf 8f6f 	isb	sy
 8001964:	f3bf 8f4f 	dsb	sy
 8001968:	61bb      	str	r3, [r7, #24]
}
 800196a:	bf00      	nop
 800196c:	e7fe      	b.n	800196c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800196e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00d      	beq.n	8001996 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001982:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	4613      	mov	r3, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	68b9      	ldr	r1, [r7, #8]
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 f83f 	bl	8001a14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001998:	4618      	mov	r0, r3
 800199a:	3730      	adds	r7, #48	; 0x30
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	4613      	mov	r3, r2
 80019ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10a      	bne.n	80019ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80019b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b8:	f383 8811 	msr	BASEPRI, r3
 80019bc:	f3bf 8f6f 	isb	sy
 80019c0:	f3bf 8f4f 	dsb	sy
 80019c4:	613b      	str	r3, [r7, #16]
}
 80019c6:	bf00      	nop
 80019c8:	e7fe      	b.n	80019c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	3348      	adds	r3, #72	; 0x48
 80019d8:	4618      	mov	r0, r3
 80019da:	f001 feb5 	bl	8003748 <pvPortMalloc>
 80019de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d011      	beq.n	8001a0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3348      	adds	r3, #72	; 0x48
 80019ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80019f8:	79fa      	ldrb	r2, [r7, #7]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	4613      	mov	r3, r2
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 f805 	bl	8001a14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001a0a:	69bb      	ldr	r3, [r7, #24]
	}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d103      	bne.n	8001a30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e002      	b.n	8001a36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001a42:	2101      	movs	r1, #1
 8001a44:	69b8      	ldr	r0, [r7, #24]
 8001a46:	f7ff fecb 	bl	80017e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	; 0x38
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001a62:	2300      	movs	r3, #0
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10a      	bne.n	8001a86 <xQueueGenericSend+0x32>
	__asm volatile
 8001a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a74:	f383 8811 	msr	BASEPRI, r3
 8001a78:	f3bf 8f6f 	isb	sy
 8001a7c:	f3bf 8f4f 	dsb	sy
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001a82:	bf00      	nop
 8001a84:	e7fe      	b.n	8001a84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d103      	bne.n	8001a94 <xQueueGenericSend+0x40>
 8001a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <xQueueGenericSend+0x44>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <xQueueGenericSend+0x46>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10a      	bne.n	8001ab4 <xQueueGenericSend+0x60>
	__asm volatile
 8001a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa2:	f383 8811 	msr	BASEPRI, r3
 8001aa6:	f3bf 8f6f 	isb	sy
 8001aaa:	f3bf 8f4f 	dsb	sy
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001ab0:	bf00      	nop
 8001ab2:	e7fe      	b.n	8001ab2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d103      	bne.n	8001ac2 <xQueueGenericSend+0x6e>
 8001aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <xQueueGenericSend+0x72>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <xQueueGenericSend+0x74>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10a      	bne.n	8001ae2 <xQueueGenericSend+0x8e>
	__asm volatile
 8001acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad0:	f383 8811 	msr	BASEPRI, r3
 8001ad4:	f3bf 8f6f 	isb	sy
 8001ad8:	f3bf 8f4f 	dsb	sy
 8001adc:	623b      	str	r3, [r7, #32]
}
 8001ade:	bf00      	nop
 8001ae0:	e7fe      	b.n	8001ae0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ae2:	f001 f9bd 	bl	8002e60 <xTaskGetSchedulerState>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <xQueueGenericSend+0x9e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <xQueueGenericSend+0xa2>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <xQueueGenericSend+0xa4>
 8001af6:	2300      	movs	r3, #0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10a      	bne.n	8001b12 <xQueueGenericSend+0xbe>
	__asm volatile
 8001afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b00:	f383 8811 	msr	BASEPRI, r3
 8001b04:	f3bf 8f6f 	isb	sy
 8001b08:	f3bf 8f4f 	dsb	sy
 8001b0c:	61fb      	str	r3, [r7, #28]
}
 8001b0e:	bf00      	nop
 8001b10:	e7fe      	b.n	8001b10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001b12:	f001 fcf7 	bl	8003504 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d302      	bcc.n	8001b28 <xQueueGenericSend+0xd4>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d129      	bne.n	8001b7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	68b9      	ldr	r1, [r7, #8]
 8001b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b2e:	f000 fac1 	bl	80020b4 <prvCopyDataToQueue>
 8001b32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d010      	beq.n	8001b5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3e:	3324      	adds	r3, #36	; 0x24
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 ffd1 	bl	8002ae8 <xTaskRemoveFromEventList>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d013      	beq.n	8001b74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001b4c:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <xQueueGenericSend+0x1f8>)
 8001b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	f3bf 8f4f 	dsb	sy
 8001b58:	f3bf 8f6f 	isb	sy
 8001b5c:	e00a      	b.n	8001b74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001b64:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <xQueueGenericSend+0x1f8>)
 8001b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	f3bf 8f4f 	dsb	sy
 8001b70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001b74:	f001 fcf6 	bl	8003564 <vPortExitCritical>
				return pdPASS;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e063      	b.n	8001c44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d103      	bne.n	8001b8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001b82:	f001 fcef 	bl	8003564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e05c      	b.n	8001c44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d106      	bne.n	8001b9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4618      	mov	r0, r3
 8001b96:	f001 f809 	bl	8002bac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001b9e:	f001 fce1 	bl	8003564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ba2:	f000 fdbf 	bl	8002724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ba6:	f001 fcad 	bl	8003504 <vPortEnterCritical>
 8001baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bb0:	b25b      	sxtb	r3, r3
 8001bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb6:	d103      	bne.n	8001bc0 <xQueueGenericSend+0x16c>
 8001bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bc6:	b25b      	sxtb	r3, r3
 8001bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bcc:	d103      	bne.n	8001bd6 <xQueueGenericSend+0x182>
 8001bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bd6:	f001 fcc5 	bl	8003564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001bda:	1d3a      	adds	r2, r7, #4
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fff8 	bl	8002bd8 <xTaskCheckForTimeOut>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d124      	bne.n	8001c38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001bee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bf0:	f000 fb58 	bl	80022a4 <prvIsQueueFull>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d018      	beq.n	8001c2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfc:	3310      	adds	r3, #16
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 ff4c 	bl	8002aa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c0a:	f000 fae3 	bl	80021d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001c0e:	f000 fd97 	bl	8002740 <xTaskResumeAll>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f47f af7c 	bne.w	8001b12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <xQueueGenericSend+0x1f8>)
 8001c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f3bf 8f4f 	dsb	sy
 8001c26:	f3bf 8f6f 	isb	sy
 8001c2a:	e772      	b.n	8001b12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c2e:	f000 fad1 	bl	80021d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c32:	f000 fd85 	bl	8002740 <xTaskResumeAll>
 8001c36:	e76c      	b.n	8001b12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c3a:	f000 facb 	bl	80021d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001c3e:	f000 fd7f 	bl	8002740 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001c42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3738      	adds	r7, #56	; 0x38
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	e000ed04 	.word	0xe000ed04

08001c50 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08e      	sub	sp, #56	; 0x38
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8001c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10a      	bne.n	8001c7a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8001c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c68:	f383 8811 	msr	BASEPRI, r3
 8001c6c:	f3bf 8f6f 	isb	sy
 8001c70:	f3bf 8f4f 	dsb	sy
 8001c74:	623b      	str	r3, [r7, #32]
}
 8001c76:	bf00      	nop
 8001c78:	e7fe      	b.n	8001c78 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00a      	beq.n	8001c98 <xQueueGiveFromISR+0x48>
	__asm volatile
 8001c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c86:	f383 8811 	msr	BASEPRI, r3
 8001c8a:	f3bf 8f6f 	isb	sy
 8001c8e:	f3bf 8f4f 	dsb	sy
 8001c92:	61fb      	str	r3, [r7, #28]
}
 8001c94:	bf00      	nop
 8001c96:	e7fe      	b.n	8001c96 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d103      	bne.n	8001ca8 <xQueueGiveFromISR+0x58>
 8001ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <xQueueGiveFromISR+0x5c>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <xQueueGiveFromISR+0x5e>
 8001cac:	2300      	movs	r3, #0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10a      	bne.n	8001cc8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8001cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb6:	f383 8811 	msr	BASEPRI, r3
 8001cba:	f3bf 8f6f 	isb	sy
 8001cbe:	f3bf 8f4f 	dsb	sy
 8001cc2:	61bb      	str	r3, [r7, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	e7fe      	b.n	8001cc6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001cc8:	f001 fcfe 	bl	80036c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001ccc:	f3ef 8211 	mrs	r2, BASEPRI
 8001cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd4:	f383 8811 	msr	BASEPRI, r3
 8001cd8:	f3bf 8f6f 	isb	sy
 8001cdc:	f3bf 8f4f 	dsb	sy
 8001ce0:	617a      	str	r2, [r7, #20]
 8001ce2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001ce4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d22b      	bcs.n	8001d50 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001d0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d12:	d112      	bne.n	8001d3a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d016      	beq.n	8001d4a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1e:	3324      	adds	r3, #36	; 0x24
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 fee1 	bl	8002ae8 <xTaskRemoveFromEventList>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00e      	beq.n	8001d4a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00b      	beq.n	8001d4a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e007      	b.n	8001d4a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d3e:	3301      	adds	r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	b25a      	sxtb	r2, r3
 8001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4e:	e001      	b.n	8001d54 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	637b      	str	r3, [r7, #52]	; 0x34
 8001d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d56:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001d5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3738      	adds	r7, #56	; 0x38
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08e      	sub	sp, #56	; 0x38
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10a      	bne.n	8001d9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8001d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8c:	f383 8811 	msr	BASEPRI, r3
 8001d90:	f3bf 8f6f 	isb	sy
 8001d94:	f3bf 8f4f 	dsb	sy
 8001d98:	623b      	str	r3, [r7, #32]
}
 8001d9a:	bf00      	nop
 8001d9c:	e7fe      	b.n	8001d9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8001da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001daa:	f383 8811 	msr	BASEPRI, r3
 8001dae:	f3bf 8f6f 	isb	sy
 8001db2:	f3bf 8f4f 	dsb	sy
 8001db6:	61fb      	str	r3, [r7, #28]
}
 8001db8:	bf00      	nop
 8001dba:	e7fe      	b.n	8001dba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001dbc:	f001 f850 	bl	8002e60 <xTaskGetSchedulerState>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d102      	bne.n	8001dcc <xQueueSemaphoreTake+0x60>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <xQueueSemaphoreTake+0x64>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <xQueueSemaphoreTake+0x66>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10a      	bne.n	8001dec <xQueueSemaphoreTake+0x80>
	__asm volatile
 8001dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dda:	f383 8811 	msr	BASEPRI, r3
 8001dde:	f3bf 8f6f 	isb	sy
 8001de2:	f3bf 8f4f 	dsb	sy
 8001de6:	61bb      	str	r3, [r7, #24]
}
 8001de8:	bf00      	nop
 8001dea:	e7fe      	b.n	8001dea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001dec:	f001 fb8a 	bl	8003504 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d024      	beq.n	8001e46 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	1e5a      	subs	r2, r3, #1
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d104      	bne.n	8001e16 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001e0c:	f001 f9d0 	bl	80031b0 <pvTaskIncrementMutexHeldCount>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e14:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00f      	beq.n	8001e3e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e20:	3310      	adds	r3, #16
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 fe60 	bl	8002ae8 <xTaskRemoveFromEventList>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001e2e:	4b54      	ldr	r3, [pc, #336]	; (8001f80 <xQueueSemaphoreTake+0x214>)
 8001e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001e3e:	f001 fb91 	bl	8003564 <vPortExitCritical>
				return pdPASS;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e097      	b.n	8001f76 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d111      	bne.n	8001e70 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00a      	beq.n	8001e68 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8001e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e56:	f383 8811 	msr	BASEPRI, r3
 8001e5a:	f3bf 8f6f 	isb	sy
 8001e5e:	f3bf 8f4f 	dsb	sy
 8001e62:	617b      	str	r3, [r7, #20]
}
 8001e64:	bf00      	nop
 8001e66:	e7fe      	b.n	8001e66 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001e68:	f001 fb7c 	bl	8003564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e082      	b.n	8001f76 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fe96 	bl	8002bac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e80:	2301      	movs	r3, #1
 8001e82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e84:	f001 fb6e 	bl	8003564 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e88:	f000 fc4c 	bl	8002724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e8c:	f001 fb3a 	bl	8003504 <vPortEnterCritical>
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e96:	b25b      	sxtb	r3, r3
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d103      	bne.n	8001ea6 <xQueueSemaphoreTake+0x13a>
 8001e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eac:	b25b      	sxtb	r3, r3
 8001eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb2:	d103      	bne.n	8001ebc <xQueueSemaphoreTake+0x150>
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ebc:	f001 fb52 	bl	8003564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ec0:	463a      	mov	r2, r7
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fe85 	bl	8002bd8 <xTaskCheckForTimeOut>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d132      	bne.n	8001f3a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ed6:	f000 f9cf 	bl	8002278 <prvIsQueueEmpty>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d026      	beq.n	8001f2e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8001ee8:	f001 fb0c 	bl	8003504 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 ffd3 	bl	8002e9c <xTaskPriorityInherit>
 8001ef6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8001ef8:	f001 fb34 	bl	8003564 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efe:	3324      	adds	r3, #36	; 0x24
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fdcb 	bl	8002aa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001f0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f0c:	f000 f962 	bl	80021d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001f10:	f000 fc16 	bl	8002740 <xTaskResumeAll>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f47f af68 	bne.w	8001dec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <xQueueSemaphoreTake+0x214>)
 8001f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f3bf 8f4f 	dsb	sy
 8001f28:	f3bf 8f6f 	isb	sy
 8001f2c:	e75e      	b.n	8001dec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8001f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f30:	f000 f950 	bl	80021d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f34:	f000 fc04 	bl	8002740 <xTaskResumeAll>
 8001f38:	e758      	b.n	8001dec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001f3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f3c:	f000 f94a 	bl	80021d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f40:	f000 fbfe 	bl	8002740 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f46:	f000 f997 	bl	8002278 <prvIsQueueEmpty>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f43f af4d 	beq.w	8001dec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8001f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8001f58:	f001 fad4 	bl	8003504 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001f5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f5e:	f000 f891 	bl	8002084 <prvGetDisinheritPriorityAfterTimeout>
 8001f62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 f892 	bl	8003094 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001f70:	f001 faf8 	bl	8003564 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001f74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3738      	adds	r7, #56	; 0x38
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	e000ed04 	.word	0xe000ed04

08001f84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08e      	sub	sp, #56	; 0x38
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10a      	bne.n	8001fb0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8001f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9e:	f383 8811 	msr	BASEPRI, r3
 8001fa2:	f3bf 8f6f 	isb	sy
 8001fa6:	f3bf 8f4f 	dsb	sy
 8001faa:	623b      	str	r3, [r7, #32]
}
 8001fac:	bf00      	nop
 8001fae:	e7fe      	b.n	8001fae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <xQueueReceiveFromISR+0x3a>
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <xQueueReceiveFromISR+0x3e>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <xQueueReceiveFromISR+0x40>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10a      	bne.n	8001fde <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8001fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fcc:	f383 8811 	msr	BASEPRI, r3
 8001fd0:	f3bf 8f6f 	isb	sy
 8001fd4:	f3bf 8f4f 	dsb	sy
 8001fd8:	61fb      	str	r3, [r7, #28]
}
 8001fda:	bf00      	nop
 8001fdc:	e7fe      	b.n	8001fdc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001fde:	f001 fb73 	bl	80036c8 <vPortValidateInterruptPriority>
	__asm volatile
 8001fe2:	f3ef 8211 	mrs	r2, BASEPRI
 8001fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fea:	f383 8811 	msr	BASEPRI, r3
 8001fee:	f3bf 8f6f 	isb	sy
 8001ff2:	f3bf 8f4f 	dsb	sy
 8001ff6:	61ba      	str	r2, [r7, #24]
 8001ff8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8001ffa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	2b00      	cmp	r3, #0
 8002008:	d02f      	beq.n	800206a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800200a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002018:	f000 f8b6 	bl	8002188 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201e:	1e5a      	subs	r2, r3, #1
 8002020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002022:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002024:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d112      	bne.n	8002054 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800202e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d016      	beq.n	8002064 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002038:	3310      	adds	r3, #16
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fd54 	bl	8002ae8 <xTaskRemoveFromEventList>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00e      	beq.n	8002064 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00b      	beq.n	8002064 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e007      	b.n	8002064 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002058:	3301      	adds	r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	b25a      	sxtb	r2, r3
 800205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002064:	2301      	movs	r3, #1
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
 8002068:	e001      	b.n	800206e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800206a:	2300      	movs	r3, #0
 800206c:	637b      	str	r3, [r7, #52]	; 0x34
 800206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002070:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	f383 8811 	msr	BASEPRI, r3
}
 8002078:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800207a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800207c:	4618      	mov	r0, r3
 800207e:	3738      	adds	r7, #56	; 0x38
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	e001      	b.n	80020a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80020a6:	68fb      	ldr	r3, [r7, #12]
	}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10d      	bne.n	80020ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d14d      	bne.n	8002176 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 ff52 	bl	8002f88 <xTaskPriorityDisinherit>
 80020e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	e043      	b.n	8002176 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d119      	bne.n	8002128 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6858      	ldr	r0, [r3, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	461a      	mov	r2, r3
 80020fe:	68b9      	ldr	r1, [r7, #8]
 8002100:	f001 fd38 	bl	8003b74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	441a      	add	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	429a      	cmp	r2, r3
 800211c:	d32b      	bcc.n	8002176 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	e026      	b.n	8002176 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	68d8      	ldr	r0, [r3, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	461a      	mov	r2, r3
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	f001 fd1e 	bl	8003b74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	425b      	negs	r3, r3
 8002142:	441a      	add	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d207      	bcs.n	8002164 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	425b      	negs	r3, r3
 800215e:	441a      	add	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d105      	bne.n	8002176 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	3b01      	subs	r3, #1
 8002174:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800217e:	697b      	ldr	r3, [r7, #20]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d018      	beq.n	80021cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	441a      	add	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d303      	bcc.n	80021bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68d9      	ldr	r1, [r3, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	461a      	mov	r2, r3
 80021c6:	6838      	ldr	r0, [r7, #0]
 80021c8:	f001 fcd4 	bl	8003b74 <memcpy>
	}
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80021dc:	f001 f992 	bl	8003504 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021e8:	e011      	b.n	800220e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d012      	beq.n	8002218 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3324      	adds	r3, #36	; 0x24
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 fc76 	bl	8002ae8 <xTaskRemoveFromEventList>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002202:	f000 fd4b 	bl	8002c9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	3b01      	subs	r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	2b00      	cmp	r3, #0
 8002214:	dce9      	bgt.n	80021ea <prvUnlockQueue+0x16>
 8002216:	e000      	b.n	800221a <prvUnlockQueue+0x46>
					break;
 8002218:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	22ff      	movs	r2, #255	; 0xff
 800221e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002222:	f001 f99f 	bl	8003564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002226:	f001 f96d 	bl	8003504 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002230:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002232:	e011      	b.n	8002258 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d012      	beq.n	8002262 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3310      	adds	r3, #16
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fc51 	bl	8002ae8 <xTaskRemoveFromEventList>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800224c:	f000 fd26 	bl	8002c9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002250:	7bbb      	ldrb	r3, [r7, #14]
 8002252:	3b01      	subs	r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800225c:	2b00      	cmp	r3, #0
 800225e:	dce9      	bgt.n	8002234 <prvUnlockQueue+0x60>
 8002260:	e000      	b.n	8002264 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002262:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	22ff      	movs	r2, #255	; 0xff
 8002268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800226c:	f001 f97a 	bl	8003564 <vPortExitCritical>
}
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002280:	f001 f940 	bl	8003504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800228c:	2301      	movs	r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e001      	b.n	8002296 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002296:	f001 f965 	bl	8003564 <vPortExitCritical>

	return xReturn;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80022ac:	f001 f92a 	bl	8003504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d102      	bne.n	80022c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80022bc:	2301      	movs	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	e001      	b.n	80022c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80022c6:	f001 f94d 	bl	8003564 <vPortExitCritical>

	return xReturn;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08e      	sub	sp, #56	; 0x38
 80022d8:	af04      	add	r7, sp, #16
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80022e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80022e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	623b      	str	r3, [r7, #32]
}
 80022fa:	bf00      	nop
 80022fc:	e7fe      	b.n	80022fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80022fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <xTaskCreateStatic+0x46>
	__asm volatile
 8002304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002308:	f383 8811 	msr	BASEPRI, r3
 800230c:	f3bf 8f6f 	isb	sy
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	61fb      	str	r3, [r7, #28]
}
 8002316:	bf00      	nop
 8002318:	e7fe      	b.n	8002318 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800231a:	2354      	movs	r3, #84	; 0x54
 800231c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b54      	cmp	r3, #84	; 0x54
 8002322:	d00a      	beq.n	800233a <xTaskCreateStatic+0x66>
	__asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	61bb      	str	r3, [r7, #24]
}
 8002336:	bf00      	nop
 8002338:	e7fe      	b.n	8002338 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800233a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233e:	2b00      	cmp	r3, #0
 8002340:	d01e      	beq.n	8002380 <xTaskCreateStatic+0xac>
 8002342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002344:	2b00      	cmp	r3, #0
 8002346:	d01b      	beq.n	8002380 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002350:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	2202      	movs	r2, #2
 8002356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800235a:	2300      	movs	r3, #0
 800235c:	9303      	str	r3, [sp, #12]
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	9302      	str	r3, [sp, #8]
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f850 	bl	8002418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800237a:	f000 f8d5 	bl	8002528 <prvAddNewTaskToReadyList>
 800237e:	e001      	b.n	8002384 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002384:	697b      	ldr	r3, [r7, #20]
	}
 8002386:	4618      	mov	r0, r3
 8002388:	3728      	adds	r7, #40	; 0x28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800238e:	b580      	push	{r7, lr}
 8002390:	b08c      	sub	sp, #48	; 0x30
 8002392:	af04      	add	r7, sp, #16
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	603b      	str	r3, [r7, #0]
 800239a:	4613      	mov	r3, r2
 800239c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 f9d0 	bl	8003748 <pvPortMalloc>
 80023a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00e      	beq.n	80023ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023b0:	2054      	movs	r0, #84	; 0x54
 80023b2:	f001 f9c9 	bl	8003748 <pvPortMalloc>
 80023b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
 80023c4:	e005      	b.n	80023d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f001 fa8a 	bl	80038e0 <vPortFree>
 80023cc:	e001      	b.n	80023d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d017      	beq.n	8002408 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023e0:	88fa      	ldrh	r2, [r7, #6]
 80023e2:	2300      	movs	r3, #0
 80023e4:	9303      	str	r3, [sp, #12]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	9302      	str	r3, [sp, #8]
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f80e 	bl	8002418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023fc:	69f8      	ldr	r0, [r7, #28]
 80023fe:	f000 f893 	bl	8002528 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002402:	2301      	movs	r3, #1
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	e002      	b.n	800240e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
 800240c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800240e:	69bb      	ldr	r3, [r7, #24]
	}
 8002410:	4618      	mov	r0, r3
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002430:	3b01      	subs	r3, #1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	f023 0307 	bic.w	r3, r3, #7
 800243e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <prvInitialiseNewTask+0x48>
	__asm volatile
 800244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244e:	f383 8811 	msr	BASEPRI, r3
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	f3bf 8f4f 	dsb	sy
 800245a:	617b      	str	r3, [r7, #20]
}
 800245c:	bf00      	nop
 800245e:	e7fe      	b.n	800245e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01f      	beq.n	80024a6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	e012      	b.n	8002492 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	4413      	add	r3, r2
 8002472:	7819      	ldrb	r1, [r3, #0]
 8002474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	4413      	add	r3, r2
 800247a:	3334      	adds	r3, #52	; 0x34
 800247c:	460a      	mov	r2, r1
 800247e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4413      	add	r3, r2
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	3301      	adds	r3, #1
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	2b0f      	cmp	r3, #15
 8002496:	d9e9      	bls.n	800246c <prvInitialiseNewTask+0x54>
 8002498:	e000      	b.n	800249c <prvInitialiseNewTask+0x84>
			{
				break;
 800249a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024a4:	e003      	b.n	80024ae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	2b06      	cmp	r3, #6
 80024b2:	d901      	bls.n	80024b8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024b4:	2306      	movs	r3, #6
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	2200      	movs	r2, #0
 80024c8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	3304      	adds	r3, #4
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff f8f2 	bl	80016b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	3318      	adds	r3, #24
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff f8ed 	bl	80016b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e6:	f1c3 0207 	rsb	r2, r3, #7
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	2200      	movs	r2, #0
 80024f8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80024fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	69b8      	ldr	r0, [r7, #24]
 8002508:	f000 fecc 	bl	80032a4 <pxPortInitialiseStack>
 800250c:	4602      	mov	r2, r0
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800251c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800251e:	bf00      	nop
 8002520:	3720      	adds	r7, #32
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002530:	f000 ffe8 	bl	8003504 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002534:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <prvAddNewTaskToReadyList+0xb8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3301      	adds	r3, #1
 800253a:	4a29      	ldr	r2, [pc, #164]	; (80025e0 <prvAddNewTaskToReadyList+0xb8>)
 800253c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800253e:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <prvAddNewTaskToReadyList+0xbc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002546:	4a27      	ldr	r2, [pc, #156]	; (80025e4 <prvAddNewTaskToReadyList+0xbc>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <prvAddNewTaskToReadyList+0xb8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d110      	bne.n	8002576 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002554:	f000 fbc6 	bl	8002ce4 <prvInitialiseTaskLists>
 8002558:	e00d      	b.n	8002576 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800255a:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <prvAddNewTaskToReadyList+0xc0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <prvAddNewTaskToReadyList+0xbc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	429a      	cmp	r2, r3
 800256e:	d802      	bhi.n	8002576 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002570:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <prvAddNewTaskToReadyList+0xbc>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002576:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <prvAddNewTaskToReadyList+0xc4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <prvAddNewTaskToReadyList+0xc4>)
 800257e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	2201      	movs	r2, #1
 8002586:	409a      	lsls	r2, r3
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <prvAddNewTaskToReadyList+0xc8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4313      	orrs	r3, r2
 800258e:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <prvAddNewTaskToReadyList+0xc8>)
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <prvAddNewTaskToReadyList+0xcc>)
 80025a0:	441a      	add	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	4619      	mov	r1, r3
 80025a8:	4610      	mov	r0, r2
 80025aa:	f7ff f892 	bl	80016d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80025ae:	f000 ffd9 	bl	8003564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <prvAddNewTaskToReadyList+0xc0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00e      	beq.n	80025d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <prvAddNewTaskToReadyList+0xbc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d207      	bcs.n	80025d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <prvAddNewTaskToReadyList+0xd0>)
 80025ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000390 	.word	0x20000390
 80025e4:	20000290 	.word	0x20000290
 80025e8:	2000039c 	.word	0x2000039c
 80025ec:	200003ac 	.word	0x200003ac
 80025f0:	20000398 	.word	0x20000398
 80025f4:	20000294 	.word	0x20000294
 80025f8:	e000ed04 	.word	0xe000ed04

080025fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d017      	beq.n	800263e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <vTaskDelay+0x60>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <vTaskDelay+0x30>
	__asm volatile
 8002616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261a:	f383 8811 	msr	BASEPRI, r3
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	60bb      	str	r3, [r7, #8]
}
 8002628:	bf00      	nop
 800262a:	e7fe      	b.n	800262a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800262c:	f000 f87a 	bl	8002724 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002630:	2100      	movs	r1, #0
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fdd0 	bl	80031d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002638:	f000 f882 	bl	8002740 <xTaskResumeAll>
 800263c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d107      	bne.n	8002654 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <vTaskDelay+0x64>)
 8002646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	200003b8 	.word	0x200003b8
 8002660:	e000ed04 	.word	0xe000ed04

08002664 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002672:	463a      	mov	r2, r7
 8002674:	1d39      	adds	r1, r7, #4
 8002676:	f107 0308 	add.w	r3, r7, #8
 800267a:	4618      	mov	r0, r3
 800267c:	f7fd ff26 	bl	80004cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002680:	6839      	ldr	r1, [r7, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	9202      	str	r2, [sp, #8]
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	2300      	movs	r3, #0
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2300      	movs	r3, #0
 8002690:	460a      	mov	r2, r1
 8002692:	491e      	ldr	r1, [pc, #120]	; (800270c <vTaskStartScheduler+0xa8>)
 8002694:	481e      	ldr	r0, [pc, #120]	; (8002710 <vTaskStartScheduler+0xac>)
 8002696:	f7ff fe1d 	bl	80022d4 <xTaskCreateStatic>
 800269a:	4603      	mov	r3, r0
 800269c:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <vTaskStartScheduler+0xb0>)
 800269e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80026a0:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <vTaskStartScheduler+0xb0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80026a8:	2301      	movs	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	e001      	b.n	80026b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d116      	bne.n	80026e6 <vTaskStartScheduler+0x82>
	__asm volatile
 80026b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	613b      	str	r3, [r7, #16]
}
 80026ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <vTaskStartScheduler+0xb4>)
 80026ce:	f04f 32ff 	mov.w	r2, #4294967295
 80026d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <vTaskStartScheduler+0xb8>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <vTaskStartScheduler+0xbc>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80026e0:	f000 fe6e 	bl	80033c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80026e4:	e00e      	b.n	8002704 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d10a      	bne.n	8002704 <vTaskStartScheduler+0xa0>
	__asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	60fb      	str	r3, [r7, #12]
}
 8002700:	bf00      	nop
 8002702:	e7fe      	b.n	8002702 <vTaskStartScheduler+0x9e>
}
 8002704:	bf00      	nop
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	08003bf0 	.word	0x08003bf0
 8002710:	08002cb5 	.word	0x08002cb5
 8002714:	200003b4 	.word	0x200003b4
 8002718:	200003b0 	.word	0x200003b0
 800271c:	2000039c 	.word	0x2000039c
 8002720:	20000394 	.word	0x20000394

08002724 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <vTaskSuspendAll+0x18>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	4a03      	ldr	r2, [pc, #12]	; (800273c <vTaskSuspendAll+0x18>)
 8002730:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	200003b8 	.word	0x200003b8

08002740 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800274e:	4b41      	ldr	r3, [pc, #260]	; (8002854 <xTaskResumeAll+0x114>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10a      	bne.n	800276c <xTaskResumeAll+0x2c>
	__asm volatile
 8002756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275a:	f383 8811 	msr	BASEPRI, r3
 800275e:	f3bf 8f6f 	isb	sy
 8002762:	f3bf 8f4f 	dsb	sy
 8002766:	603b      	str	r3, [r7, #0]
}
 8002768:	bf00      	nop
 800276a:	e7fe      	b.n	800276a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800276c:	f000 feca 	bl	8003504 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002770:	4b38      	ldr	r3, [pc, #224]	; (8002854 <xTaskResumeAll+0x114>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	3b01      	subs	r3, #1
 8002776:	4a37      	ldr	r2, [pc, #220]	; (8002854 <xTaskResumeAll+0x114>)
 8002778:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800277a:	4b36      	ldr	r3, [pc, #216]	; (8002854 <xTaskResumeAll+0x114>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d161      	bne.n	8002846 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002782:	4b35      	ldr	r3, [pc, #212]	; (8002858 <xTaskResumeAll+0x118>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d05d      	beq.n	8002846 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800278a:	e02e      	b.n	80027ea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800278c:	4b33      	ldr	r3, [pc, #204]	; (800285c <xTaskResumeAll+0x11c>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3318      	adds	r3, #24
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe fff7 	bl	800178c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3304      	adds	r3, #4
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe fff2 	bl	800178c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	2201      	movs	r2, #1
 80027ae:	409a      	lsls	r2, r3
 80027b0:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <xTaskResumeAll+0x120>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	4a2a      	ldr	r2, [pc, #168]	; (8002860 <xTaskResumeAll+0x120>)
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4a27      	ldr	r2, [pc, #156]	; (8002864 <xTaskResumeAll+0x124>)
 80027c8:	441a      	add	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3304      	adds	r3, #4
 80027ce:	4619      	mov	r1, r3
 80027d0:	4610      	mov	r0, r2
 80027d2:	f7fe ff7e 	bl	80016d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027da:	4b23      	ldr	r3, [pc, #140]	; (8002868 <xTaskResumeAll+0x128>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d302      	bcc.n	80027ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80027e4:	4b21      	ldr	r3, [pc, #132]	; (800286c <xTaskResumeAll+0x12c>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <xTaskResumeAll+0x11c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1cc      	bne.n	800278c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80027f8:	f000 fb12 	bl	8002e20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <xTaskResumeAll+0x130>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d010      	beq.n	800282a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002808:	f000 f836 	bl	8002878 <xTaskIncrementTick>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002812:	4b16      	ldr	r3, [pc, #88]	; (800286c <xTaskResumeAll+0x12c>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f1      	bne.n	8002808 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002824:	4b12      	ldr	r3, [pc, #72]	; (8002870 <xTaskResumeAll+0x130>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <xTaskResumeAll+0x12c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002832:	2301      	movs	r3, #1
 8002834:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <xTaskResumeAll+0x134>)
 8002838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	f3bf 8f4f 	dsb	sy
 8002842:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002846:	f000 fe8d 	bl	8003564 <vPortExitCritical>

	return xAlreadyYielded;
 800284a:	68bb      	ldr	r3, [r7, #8]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	200003b8 	.word	0x200003b8
 8002858:	20000390 	.word	0x20000390
 800285c:	20000350 	.word	0x20000350
 8002860:	20000398 	.word	0x20000398
 8002864:	20000294 	.word	0x20000294
 8002868:	20000290 	.word	0x20000290
 800286c:	200003a4 	.word	0x200003a4
 8002870:	200003a0 	.word	0x200003a0
 8002874:	e000ed04 	.word	0xe000ed04

08002878 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002882:	4b4e      	ldr	r3, [pc, #312]	; (80029bc <xTaskIncrementTick+0x144>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 808e 	bne.w	80029a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800288c:	4b4c      	ldr	r3, [pc, #304]	; (80029c0 <xTaskIncrementTick+0x148>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3301      	adds	r3, #1
 8002892:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002894:	4a4a      	ldr	r2, [pc, #296]	; (80029c0 <xTaskIncrementTick+0x148>)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d120      	bne.n	80028e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80028a0:	4b48      	ldr	r3, [pc, #288]	; (80029c4 <xTaskIncrementTick+0x14c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80028aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	603b      	str	r3, [r7, #0]
}
 80028bc:	bf00      	nop
 80028be:	e7fe      	b.n	80028be <xTaskIncrementTick+0x46>
 80028c0:	4b40      	ldr	r3, [pc, #256]	; (80029c4 <xTaskIncrementTick+0x14c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b40      	ldr	r3, [pc, #256]	; (80029c8 <xTaskIncrementTick+0x150>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a3e      	ldr	r2, [pc, #248]	; (80029c4 <xTaskIncrementTick+0x14c>)
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4a3e      	ldr	r2, [pc, #248]	; (80029c8 <xTaskIncrementTick+0x150>)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <xTaskIncrementTick+0x154>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	4a3c      	ldr	r2, [pc, #240]	; (80029cc <xTaskIncrementTick+0x154>)
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	f000 fa9f 	bl	8002e20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80028e2:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <xTaskIncrementTick+0x158>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d348      	bcc.n	800297e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028ec:	4b35      	ldr	r3, [pc, #212]	; (80029c4 <xTaskIncrementTick+0x14c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d104      	bne.n	8002900 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028f6:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <xTaskIncrementTick+0x158>)
 80028f8:	f04f 32ff 	mov.w	r2, #4294967295
 80028fc:	601a      	str	r2, [r3, #0]
					break;
 80028fe:	e03e      	b.n	800297e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002900:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <xTaskIncrementTick+0x14c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	d203      	bcs.n	8002920 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002918:	4a2d      	ldr	r2, [pc, #180]	; (80029d0 <xTaskIncrementTick+0x158>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800291e:	e02e      	b.n	800297e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	3304      	adds	r3, #4
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe ff31 	bl	800178c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	2b00      	cmp	r3, #0
 8002930:	d004      	beq.n	800293c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	3318      	adds	r3, #24
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe ff28 	bl	800178c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	2201      	movs	r2, #1
 8002942:	409a      	lsls	r2, r3
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <xTaskIncrementTick+0x15c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4313      	orrs	r3, r2
 800294a:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <xTaskIncrementTick+0x15c>)
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <xTaskIncrementTick+0x160>)
 800295c:	441a      	add	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	3304      	adds	r3, #4
 8002962:	4619      	mov	r1, r3
 8002964:	4610      	mov	r0, r2
 8002966:	f7fe feb4 	bl	80016d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296e:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <xTaskIncrementTick+0x164>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	429a      	cmp	r2, r3
 8002976:	d3b9      	bcc.n	80028ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002978:	2301      	movs	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800297c:	e7b6      	b.n	80028ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <xTaskIncrementTick+0x164>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002984:	4914      	ldr	r1, [pc, #80]	; (80029d8 <xTaskIncrementTick+0x160>)
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d901      	bls.n	800299a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002996:	2301      	movs	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <xTaskIncrementTick+0x168>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80029a2:	2301      	movs	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	e004      	b.n	80029b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <xTaskIncrementTick+0x16c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <xTaskIncrementTick+0x16c>)
 80029b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80029b2:	697b      	ldr	r3, [r7, #20]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	200003b8 	.word	0x200003b8
 80029c0:	20000394 	.word	0x20000394
 80029c4:	20000348 	.word	0x20000348
 80029c8:	2000034c 	.word	0x2000034c
 80029cc:	200003a8 	.word	0x200003a8
 80029d0:	200003b0 	.word	0x200003b0
 80029d4:	20000398 	.word	0x20000398
 80029d8:	20000294 	.word	0x20000294
 80029dc:	20000290 	.word	0x20000290
 80029e0:	200003a4 	.word	0x200003a4
 80029e4:	200003a0 	.word	0x200003a0

080029e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <vTaskSwitchContext+0xa4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80029f6:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <vTaskSwitchContext+0xa8>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80029fc:	e03f      	b.n	8002a7e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <vTaskSwitchContext+0xa8>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a04:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <vTaskSwitchContext+0xac>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002a12:	7afb      	ldrb	r3, [r7, #11]
 8002a14:	f1c3 031f 	rsb	r3, r3, #31
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	491f      	ldr	r1, [pc, #124]	; (8002a98 <vTaskSwitchContext+0xb0>)
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	607b      	str	r3, [r7, #4]
}
 8002a40:	bf00      	nop
 8002a42:	e7fe      	b.n	8002a42 <vTaskSwitchContext+0x5a>
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4a12      	ldr	r2, [pc, #72]	; (8002a98 <vTaskSwitchContext+0xb0>)
 8002a50:	4413      	add	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	3308      	adds	r3, #8
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d104      	bne.n	8002a74 <vTaskSwitchContext+0x8c>
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4a08      	ldr	r2, [pc, #32]	; (8002a9c <vTaskSwitchContext+0xb4>)
 8002a7c:	6013      	str	r3, [r2, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	200003b8 	.word	0x200003b8
 8002a90:	200003a4 	.word	0x200003a4
 8002a94:	20000398 	.word	0x20000398
 8002a98:	20000294 	.word	0x20000294
 8002a9c:	20000290 	.word	0x20000290

08002aa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	60fb      	str	r3, [r7, #12]
}
 8002ac2:	bf00      	nop
 8002ac4:	e7fe      	b.n	8002ac4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ac6:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <vTaskPlaceOnEventList+0x44>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3318      	adds	r3, #24
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe fe23 	bl	800171a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	6838      	ldr	r0, [r7, #0]
 8002ad8:	f000 fb7e 	bl	80031d8 <prvAddCurrentTaskToDelayedList>
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000290 	.word	0x20000290

08002ae8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	60fb      	str	r3, [r7, #12]
}
 8002b10:	bf00      	nop
 8002b12:	e7fe      	b.n	8002b12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	3318      	adds	r3, #24
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe fe37 	bl	800178c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <xTaskRemoveFromEventList+0xac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d11c      	bne.n	8002b60 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fe2e 	bl	800178c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	2201      	movs	r2, #1
 8002b36:	409a      	lsls	r2, r3
 8002b38:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <xTaskRemoveFromEventList+0xb0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <xTaskRemoveFromEventList+0xb0>)
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <xTaskRemoveFromEventList+0xb4>)
 8002b50:	441a      	add	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	3304      	adds	r3, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f7fe fdba 	bl	80016d2 <vListInsertEnd>
 8002b5e:	e005      	b.n	8002b6c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	3318      	adds	r3, #24
 8002b64:	4619      	mov	r1, r3
 8002b66:	480e      	ldr	r0, [pc, #56]	; (8002ba0 <xTaskRemoveFromEventList+0xb8>)
 8002b68:	f7fe fdb3 	bl	80016d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <xTaskRemoveFromEventList+0xbc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d905      	bls.n	8002b86 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <xTaskRemoveFromEventList+0xc0>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e001      	b.n	8002b8a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002b8a:	697b      	ldr	r3, [r7, #20]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200003b8 	.word	0x200003b8
 8002b98:	20000398 	.word	0x20000398
 8002b9c:	20000294 	.word	0x20000294
 8002ba0:	20000350 	.word	0x20000350
 8002ba4:	20000290 	.word	0x20000290
 8002ba8:	200003a4 	.word	0x200003a4

08002bac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <vTaskInternalSetTimeOutState+0x24>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <vTaskInternalSetTimeOutState+0x28>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	605a      	str	r2, [r3, #4]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	200003a8 	.word	0x200003a8
 8002bd4:	20000394 	.word	0x20000394

08002bd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	613b      	str	r3, [r7, #16]
}
 8002bfa:	bf00      	nop
 8002bfc:	e7fe      	b.n	8002bfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	60fb      	str	r3, [r7, #12]
}
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002c1a:	f000 fc73 	bl	8003504 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <xTaskCheckForTimeOut+0xbc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c36:	d102      	bne.n	8002c3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	e023      	b.n	8002c86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <xTaskCheckForTimeOut+0xc0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d007      	beq.n	8002c5a <xTaskCheckForTimeOut+0x82>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d302      	bcc.n	8002c5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002c54:	2301      	movs	r3, #1
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	e015      	b.n	8002c86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d20b      	bcs.n	8002c7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	1ad2      	subs	r2, r2, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff ff9b 	bl	8002bac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	e004      	b.n	8002c86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002c86:	f000 fc6d 	bl	8003564 <vPortExitCritical>

	return xReturn;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000394 	.word	0x20000394
 8002c98:	200003a8 	.word	0x200003a8

08002c9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <vTaskMissedYield+0x14>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	200003a4 	.word	0x200003a4

08002cb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002cbc:	f000 f852 	bl	8002d64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <prvIdleTask+0x28>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d9f9      	bls.n	8002cbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <prvIdleTask+0x2c>)
 8002cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002cd8:	e7f0      	b.n	8002cbc <prvIdleTask+0x8>
 8002cda:	bf00      	nop
 8002cdc:	20000294 	.word	0x20000294
 8002ce0:	e000ed04 	.word	0xe000ed04

08002ce4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	e00c      	b.n	8002d0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <prvInitialiseTaskLists+0x60>)
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fcba 	bl	8001678 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3301      	adds	r3, #1
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b06      	cmp	r3, #6
 8002d0e:	d9ef      	bls.n	8002cf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002d10:	480d      	ldr	r0, [pc, #52]	; (8002d48 <prvInitialiseTaskLists+0x64>)
 8002d12:	f7fe fcb1 	bl	8001678 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002d16:	480d      	ldr	r0, [pc, #52]	; (8002d4c <prvInitialiseTaskLists+0x68>)
 8002d18:	f7fe fcae 	bl	8001678 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002d1c:	480c      	ldr	r0, [pc, #48]	; (8002d50 <prvInitialiseTaskLists+0x6c>)
 8002d1e:	f7fe fcab 	bl	8001678 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002d22:	480c      	ldr	r0, [pc, #48]	; (8002d54 <prvInitialiseTaskLists+0x70>)
 8002d24:	f7fe fca8 	bl	8001678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002d28:	480b      	ldr	r0, [pc, #44]	; (8002d58 <prvInitialiseTaskLists+0x74>)
 8002d2a:	f7fe fca5 	bl	8001678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <prvInitialiseTaskLists+0x78>)
 8002d30:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <prvInitialiseTaskLists+0x64>)
 8002d32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <prvInitialiseTaskLists+0x7c>)
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <prvInitialiseTaskLists+0x68>)
 8002d38:	601a      	str	r2, [r3, #0]
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000294 	.word	0x20000294
 8002d48:	20000320 	.word	0x20000320
 8002d4c:	20000334 	.word	0x20000334
 8002d50:	20000350 	.word	0x20000350
 8002d54:	20000364 	.word	0x20000364
 8002d58:	2000037c 	.word	0x2000037c
 8002d5c:	20000348 	.word	0x20000348
 8002d60:	2000034c 	.word	0x2000034c

08002d64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d6a:	e019      	b.n	8002da0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002d6c:	f000 fbca 	bl	8003504 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <prvCheckTasksWaitingTermination+0x50>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe fd05 	bl	800178c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <prvCheckTasksWaitingTermination+0x54>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <prvCheckTasksWaitingTermination+0x54>)
 8002d8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <prvCheckTasksWaitingTermination+0x58>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <prvCheckTasksWaitingTermination+0x58>)
 8002d94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002d96:	f000 fbe5 	bl	8003564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f810 	bl	8002dc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <prvCheckTasksWaitingTermination+0x58>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e1      	bne.n	8002d6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000364 	.word	0x20000364
 8002db8:	20000390 	.word	0x20000390
 8002dbc:	20000378 	.word	0x20000378

08002dc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d108      	bne.n	8002de4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fd82 	bl	80038e0 <vPortFree>
				vPortFree( pxTCB );
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fd7f 	bl	80038e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002de2:	e018      	b.n	8002e16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d103      	bne.n	8002df6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fd76 	bl	80038e0 <vPortFree>
	}
 8002df4:	e00f      	b.n	8002e16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d00a      	beq.n	8002e16 <prvDeleteTCB+0x56>
	__asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	60fb      	str	r3, [r7, #12]
}
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <prvDeleteTCB+0x54>
	}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <prvResetNextTaskUnblockTime+0x38>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d104      	bne.n	8002e3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e30:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <prvResetNextTaskUnblockTime+0x3c>)
 8002e32:	f04f 32ff 	mov.w	r2, #4294967295
 8002e36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002e38:	e008      	b.n	8002e4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <prvResetNextTaskUnblockTime+0x38>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <prvResetNextTaskUnblockTime+0x3c>)
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	20000348 	.word	0x20000348
 8002e5c:	200003b0 	.word	0x200003b0

08002e60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <xTaskGetSchedulerState+0x34>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	e008      	b.n	8002e86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <xTaskGetSchedulerState+0x38>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	607b      	str	r3, [r7, #4]
 8002e80:	e001      	b.n	8002e86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002e86:	687b      	ldr	r3, [r7, #4]
	}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	2000039c 	.word	0x2000039c
 8002e98:	200003b8 	.word	0x200003b8

08002e9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d05e      	beq.n	8002f70 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb6:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <xTaskPriorityInherit+0xe0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d24e      	bcs.n	8002f5e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	db06      	blt.n	8002ed6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <xTaskPriorityInherit+0xe0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	f1c3 0207 	rsb	r2, r3, #7
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	6959      	ldr	r1, [r3, #20]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4a26      	ldr	r2, [pc, #152]	; (8002f80 <xTaskPriorityInherit+0xe4>)
 8002ee8:	4413      	add	r3, r2
 8002eea:	4299      	cmp	r1, r3
 8002eec:	d12f      	bne.n	8002f4e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fc4a 	bl	800178c <uxListRemove>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	2201      	movs	r2, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <xTaskPriorityInherit+0xe8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <xTaskPriorityInherit+0xe8>)
 8002f12:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <xTaskPriorityInherit+0xe0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	2201      	movs	r2, #1
 8002f24:	409a      	lsls	r2, r3
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <xTaskPriorityInherit+0xe8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <xTaskPriorityInherit+0xe8>)
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <xTaskPriorityInherit+0xe4>)
 8002f3e:	441a      	add	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	3304      	adds	r3, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7fe fbc3 	bl	80016d2 <vListInsertEnd>
 8002f4c:	e004      	b.n	8002f58 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <xTaskPriorityInherit+0xe0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	e008      	b.n	8002f70 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <xTaskPriorityInherit+0xe0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d201      	bcs.n	8002f70 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002f70:	68fb      	ldr	r3, [r7, #12]
	}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000290 	.word	0x20000290
 8002f80:	20000294 	.word	0x20000294
 8002f84:	20000398 	.word	0x20000398

08002f88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d06e      	beq.n	800307c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002f9e:	4b3a      	ldr	r3, [pc, #232]	; (8003088 <xTaskPriorityDisinherit+0x100>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d00a      	beq.n	8002fbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	60fb      	str	r3, [r7, #12]
}
 8002fba:	bf00      	nop
 8002fbc:	e7fe      	b.n	8002fbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10a      	bne.n	8002fdc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fca:	f383 8811 	msr	BASEPRI, r3
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	60bb      	str	r3, [r7, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	e7fe      	b.n	8002fda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d044      	beq.n	800307c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d140      	bne.n	800307c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fbc4 	bl	800178c <uxListRemove>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d115      	bne.n	8003036 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300e:	491f      	ldr	r1, [pc, #124]	; (800308c <xTaskPriorityDisinherit+0x104>)
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10a      	bne.n	8003036 <xTaskPriorityDisinherit+0xae>
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	2201      	movs	r2, #1
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43da      	mvns	r2, r3
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <xTaskPriorityDisinherit+0x108>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4013      	ands	r3, r2
 8003032:	4a17      	ldr	r2, [pc, #92]	; (8003090 <xTaskPriorityDisinherit+0x108>)
 8003034:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	f1c3 0207 	rsb	r2, r3, #7
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	2201      	movs	r2, #1
 8003050:	409a      	lsls	r2, r3
 8003052:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <xTaskPriorityDisinherit+0x108>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4313      	orrs	r3, r2
 8003058:	4a0d      	ldr	r2, [pc, #52]	; (8003090 <xTaskPriorityDisinherit+0x108>)
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4a08      	ldr	r2, [pc, #32]	; (800308c <xTaskPriorityDisinherit+0x104>)
 800306a:	441a      	add	r2, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	3304      	adds	r3, #4
 8003070:	4619      	mov	r1, r3
 8003072:	4610      	mov	r0, r2
 8003074:	f7fe fb2d 	bl	80016d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003078:	2301      	movs	r3, #1
 800307a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800307c:	697b      	ldr	r3, [r7, #20]
	}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000290 	.word	0x20000290
 800308c:	20000294 	.word	0x20000294
 8003090:	20000398 	.word	0x20000398

08003094 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80030a2:	2301      	movs	r3, #1
 80030a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d077      	beq.n	800319c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	60fb      	str	r3, [r7, #12]
}
 80030c6:	bf00      	nop
 80030c8:	e7fe      	b.n	80030c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d902      	bls.n	80030da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	61fb      	str	r3, [r7, #28]
 80030d8:	e002      	b.n	80030e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d058      	beq.n	800319c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d153      	bne.n	800319c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80030f4:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d10a      	bne.n	8003114 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	60bb      	str	r3, [r7, #8]
}
 8003110:	bf00      	nop
 8003112:	e7fe      	b.n	8003112 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	db04      	blt.n	8003132 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f1c3 0207 	rsb	r2, r3, #7
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	6959      	ldr	r1, [r3, #20]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4a19      	ldr	r2, [pc, #100]	; (80031a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003142:	4413      	add	r3, r2
 8003144:	4299      	cmp	r1, r3
 8003146:	d129      	bne.n	800319c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	3304      	adds	r3, #4
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe fb1d 	bl	800178c <uxListRemove>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10a      	bne.n	800316e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	2201      	movs	r2, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43da      	mvns	r2, r3
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4013      	ands	r3, r2
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800316c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	2201      	movs	r2, #1
 8003174:	409a      	lsls	r2, r3
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4313      	orrs	r3, r2
 800317c:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800318e:	441a      	add	r2, r3
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	3304      	adds	r3, #4
 8003194:	4619      	mov	r1, r3
 8003196:	4610      	mov	r0, r2
 8003198:	f7fe fa9b 	bl	80016d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800319c:	bf00      	nop
 800319e:	3720      	adds	r7, #32
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000290 	.word	0x20000290
 80031a8:	20000294 	.word	0x20000294
 80031ac:	20000398 	.word	0x20000398

080031b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031c2:	3201      	adds	r2, #1
 80031c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80031c6:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80031c8:	681b      	ldr	r3, [r3, #0]
	}
 80031ca:	4618      	mov	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	20000290 	.word	0x20000290

080031d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80031e2:	4b29      	ldr	r3, [pc, #164]	; (8003288 <prvAddCurrentTaskToDelayedList+0xb0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <prvAddCurrentTaskToDelayedList+0xb4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3304      	adds	r3, #4
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe facc 	bl	800178c <uxListRemove>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10b      	bne.n	8003212 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80031fa:	4b24      	ldr	r3, [pc, #144]	; (800328c <prvAddCurrentTaskToDelayedList+0xb4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	2201      	movs	r2, #1
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43da      	mvns	r2, r3
 8003208:	4b21      	ldr	r3, [pc, #132]	; (8003290 <prvAddCurrentTaskToDelayedList+0xb8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4013      	ands	r3, r2
 800320e:	4a20      	ldr	r2, [pc, #128]	; (8003290 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003210:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d10a      	bne.n	8003230 <prvAddCurrentTaskToDelayedList+0x58>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3304      	adds	r3, #4
 8003226:	4619      	mov	r1, r3
 8003228:	481a      	ldr	r0, [pc, #104]	; (8003294 <prvAddCurrentTaskToDelayedList+0xbc>)
 800322a:	f7fe fa52 	bl	80016d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800322e:	e026      	b.n	800327e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4413      	add	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <prvAddCurrentTaskToDelayedList+0xb4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	429a      	cmp	r2, r3
 8003246:	d209      	bcs.n	800325c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003248:	4b13      	ldr	r3, [pc, #76]	; (8003298 <prvAddCurrentTaskToDelayedList+0xc0>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <prvAddCurrentTaskToDelayedList+0xb4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3304      	adds	r3, #4
 8003252:	4619      	mov	r1, r3
 8003254:	4610      	mov	r0, r2
 8003256:	f7fe fa60 	bl	800171a <vListInsert>
}
 800325a:	e010      	b.n	800327e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <prvAddCurrentTaskToDelayedList+0xc4>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3304      	adds	r3, #4
 8003266:	4619      	mov	r1, r3
 8003268:	4610      	mov	r0, r2
 800326a:	f7fe fa56 	bl	800171a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	429a      	cmp	r2, r3
 8003276:	d202      	bcs.n	800327e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003278:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	6013      	str	r3, [r2, #0]
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000394 	.word	0x20000394
 800328c:	20000290 	.word	0x20000290
 8003290:	20000398 	.word	0x20000398
 8003294:	2000037c 	.word	0x2000037c
 8003298:	2000034c 	.word	0x2000034c
 800329c:	20000348 	.word	0x20000348
 80032a0:	200003b0 	.word	0x200003b0

080032a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3b04      	subs	r3, #4
 80032b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3b04      	subs	r3, #4
 80032c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f023 0201 	bic.w	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3b04      	subs	r3, #4
 80032d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80032d4:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <pxPortInitialiseStack+0x64>)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3b14      	subs	r3, #20
 80032de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3b04      	subs	r3, #4
 80032ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f06f 0202 	mvn.w	r2, #2
 80032f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3b20      	subs	r3, #32
 80032f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80032fa:	68fb      	ldr	r3, [r7, #12]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	0800330d 	.word	0x0800330d

0800330c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <prvTaskExitError+0x54>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331e:	d00a      	beq.n	8003336 <prvTaskExitError+0x2a>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	60fb      	str	r3, [r7, #12]
}
 8003332:	bf00      	nop
 8003334:	e7fe      	b.n	8003334 <prvTaskExitError+0x28>
	__asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	60bb      	str	r3, [r7, #8]
}
 8003348:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800334a:	bf00      	nop
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0fc      	beq.n	800334c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	2000000c 	.word	0x2000000c
	...

08003370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <pxCurrentTCBConst2>)
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	6808      	ldr	r0, [r1, #0]
 8003376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800337a:	f380 8809 	msr	PSP, r0
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f04f 0000 	mov.w	r0, #0
 8003386:	f380 8811 	msr	BASEPRI, r0
 800338a:	4770      	bx	lr
 800338c:	f3af 8000 	nop.w

08003390 <pxCurrentTCBConst2>:
 8003390:	20000290 	.word	0x20000290
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop

08003398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003398:	4808      	ldr	r0, [pc, #32]	; (80033bc <prvPortStartFirstTask+0x24>)
 800339a:	6800      	ldr	r0, [r0, #0]
 800339c:	6800      	ldr	r0, [r0, #0]
 800339e:	f380 8808 	msr	MSP, r0
 80033a2:	f04f 0000 	mov.w	r0, #0
 80033a6:	f380 8814 	msr	CONTROL, r0
 80033aa:	b662      	cpsie	i
 80033ac:	b661      	cpsie	f
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	df00      	svc	0
 80033b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80033ba:	bf00      	nop
 80033bc:	e000ed08 	.word	0xe000ed08

080033c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80033c6:	4b46      	ldr	r3, [pc, #280]	; (80034e0 <xPortStartScheduler+0x120>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a46      	ldr	r2, [pc, #280]	; (80034e4 <xPortStartScheduler+0x124>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10a      	bne.n	80033e6 <xPortStartScheduler+0x26>
	__asm volatile
 80033d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d4:	f383 8811 	msr	BASEPRI, r3
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	613b      	str	r3, [r7, #16]
}
 80033e2:	bf00      	nop
 80033e4:	e7fe      	b.n	80033e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80033e6:	4b3e      	ldr	r3, [pc, #248]	; (80034e0 <xPortStartScheduler+0x120>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a3f      	ldr	r2, [pc, #252]	; (80034e8 <xPortStartScheduler+0x128>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d10a      	bne.n	8003406 <xPortStartScheduler+0x46>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	60fb      	str	r3, [r7, #12]
}
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003406:	4b39      	ldr	r3, [pc, #228]	; (80034ec <xPortStartScheduler+0x12c>)
 8003408:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	22ff      	movs	r2, #255	; 0xff
 8003416:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <xPortStartScheduler+0x130>)
 800342c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800342e:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <xPortStartScheduler+0x134>)
 8003430:	2207      	movs	r2, #7
 8003432:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003434:	e009      	b.n	800344a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003436:	4b2f      	ldr	r3, [pc, #188]	; (80034f4 <xPortStartScheduler+0x134>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3b01      	subs	r3, #1
 800343c:	4a2d      	ldr	r2, [pc, #180]	; (80034f4 <xPortStartScheduler+0x134>)
 800343e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	b2db      	uxtb	r3, r3
 8003448:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003452:	2b80      	cmp	r3, #128	; 0x80
 8003454:	d0ef      	beq.n	8003436 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003456:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <xPortStartScheduler+0x134>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f1c3 0307 	rsb	r3, r3, #7
 800345e:	2b04      	cmp	r3, #4
 8003460:	d00a      	beq.n	8003478 <xPortStartScheduler+0xb8>
	__asm volatile
 8003462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	60bb      	str	r3, [r7, #8]
}
 8003474:	bf00      	nop
 8003476:	e7fe      	b.n	8003476 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003478:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <xPortStartScheduler+0x134>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <xPortStartScheduler+0x134>)
 8003480:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003482:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <xPortStartScheduler+0x134>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800348a:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <xPortStartScheduler+0x134>)
 800348c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003496:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <xPortStartScheduler+0x138>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a17      	ldr	r2, [pc, #92]	; (80034f8 <xPortStartScheduler+0x138>)
 800349c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <xPortStartScheduler+0x138>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a14      	ldr	r2, [pc, #80]	; (80034f8 <xPortStartScheduler+0x138>)
 80034a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80034ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80034ae:	f000 f8dd 	bl	800366c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <xPortStartScheduler+0x13c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80034b8:	f000 f8fc 	bl	80036b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80034bc:	4b10      	ldr	r3, [pc, #64]	; (8003500 <xPortStartScheduler+0x140>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a0f      	ldr	r2, [pc, #60]	; (8003500 <xPortStartScheduler+0x140>)
 80034c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80034c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80034c8:	f7ff ff66 	bl	8003398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80034cc:	f7ff fa8c 	bl	80029e8 <vTaskSwitchContext>
	prvTaskExitError();
 80034d0:	f7ff ff1c 	bl	800330c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	e000ed00 	.word	0xe000ed00
 80034e4:	410fc271 	.word	0x410fc271
 80034e8:	410fc270 	.word	0x410fc270
 80034ec:	e000e400 	.word	0xe000e400
 80034f0:	200003bc 	.word	0x200003bc
 80034f4:	200003c0 	.word	0x200003c0
 80034f8:	e000ed20 	.word	0xe000ed20
 80034fc:	2000000c 	.word	0x2000000c
 8003500:	e000ef34 	.word	0xe000ef34

08003504 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
	__asm volatile
 800350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	607b      	str	r3, [r7, #4]
}
 800351c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800351e:	4b0f      	ldr	r3, [pc, #60]	; (800355c <vPortEnterCritical+0x58>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3301      	adds	r3, #1
 8003524:	4a0d      	ldr	r2, [pc, #52]	; (800355c <vPortEnterCritical+0x58>)
 8003526:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <vPortEnterCritical+0x58>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d10f      	bne.n	8003550 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <vPortEnterCritical+0x5c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <vPortEnterCritical+0x4c>
	__asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	603b      	str	r3, [r7, #0]
}
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <vPortEnterCritical+0x4a>
	}
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	2000000c 	.word	0x2000000c
 8003560:	e000ed04 	.word	0xe000ed04

08003564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <vPortExitCritical+0x50>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10a      	bne.n	8003588 <vPortExitCritical+0x24>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	607b      	str	r3, [r7, #4]
}
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <vPortExitCritical+0x50>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3b01      	subs	r3, #1
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <vPortExitCritical+0x50>)
 8003590:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <vPortExitCritical+0x50>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d105      	bne.n	80035a6 <vPortExitCritical+0x42>
 800359a:	2300      	movs	r3, #0
 800359c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f383 8811 	msr	BASEPRI, r3
}
 80035a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	2000000c 	.word	0x2000000c
	...

080035c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80035c0:	f3ef 8009 	mrs	r0, PSP
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	4b15      	ldr	r3, [pc, #84]	; (8003620 <pxCurrentTCBConst>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	f01e 0f10 	tst.w	lr, #16
 80035d0:	bf08      	it	eq
 80035d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80035d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035da:	6010      	str	r0, [r2, #0]
 80035dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80035e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80035e4:	f380 8811 	msr	BASEPRI, r0
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f7ff f9fa 	bl	80029e8 <vTaskSwitchContext>
 80035f4:	f04f 0000 	mov.w	r0, #0
 80035f8:	f380 8811 	msr	BASEPRI, r0
 80035fc:	bc09      	pop	{r0, r3}
 80035fe:	6819      	ldr	r1, [r3, #0]
 8003600:	6808      	ldr	r0, [r1, #0]
 8003602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003606:	f01e 0f10 	tst.w	lr, #16
 800360a:	bf08      	it	eq
 800360c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003610:	f380 8809 	msr	PSP, r0
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	f3af 8000 	nop.w

08003620 <pxCurrentTCBConst>:
 8003620:	20000290 	.word	0x20000290
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop

08003628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
	__asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	607b      	str	r3, [r7, #4]
}
 8003640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003642:	f7ff f919 	bl	8002878 <xTaskIncrementTick>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <xPortSysTickHandler+0x40>)
 800364e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	2300      	movs	r3, #0
 8003656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f383 8811 	msr	BASEPRI, r3
}
 800365e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	e000ed04 	.word	0xe000ed04

0800366c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <vPortSetupTimerInterrupt+0x34>)
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <vPortSetupTimerInterrupt+0x38>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <vPortSetupTimerInterrupt+0x3c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <vPortSetupTimerInterrupt+0x40>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <vPortSetupTimerInterrupt+0x44>)
 800368a:	3b01      	subs	r3, #1
 800368c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800368e:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <vPortSetupTimerInterrupt+0x34>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010
 80036a4:	e000e018 	.word	0xe000e018
 80036a8:	20000000 	.word	0x20000000
 80036ac:	10624dd3 	.word	0x10624dd3
 80036b0:	e000e014 	.word	0xe000e014

080036b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80036b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80036c4 <vPortEnableVFP+0x10>
 80036b8:	6801      	ldr	r1, [r0, #0]
 80036ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80036be:	6001      	str	r1, [r0, #0]
 80036c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80036c2:	bf00      	nop
 80036c4:	e000ed88 	.word	0xe000ed88

080036c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80036ce:	f3ef 8305 	mrs	r3, IPSR
 80036d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b0f      	cmp	r3, #15
 80036d8:	d914      	bls.n	8003704 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80036da:	4a17      	ldr	r2, [pc, #92]	; (8003738 <vPortValidateInterruptPriority+0x70>)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4413      	add	r3, r2
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80036e4:	4b15      	ldr	r3, [pc, #84]	; (800373c <vPortValidateInterruptPriority+0x74>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	7afa      	ldrb	r2, [r7, #11]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d20a      	bcs.n	8003704 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	607b      	str	r3, [r7, #4]
}
 8003700:	bf00      	nop
 8003702:	e7fe      	b.n	8003702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <vPortValidateInterruptPriority+0x78>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800370c:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <vPortValidateInterruptPriority+0x7c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d90a      	bls.n	800372a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	603b      	str	r3, [r7, #0]
}
 8003726:	bf00      	nop
 8003728:	e7fe      	b.n	8003728 <vPortValidateInterruptPriority+0x60>
	}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	e000e3f0 	.word	0xe000e3f0
 800373c:	200003bc 	.word	0x200003bc
 8003740:	e000ed0c 	.word	0xe000ed0c
 8003744:	200003c0 	.word	0x200003c0

08003748 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003750:	2300      	movs	r3, #0
 8003752:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003754:	f7fe ffe6 	bl	8002724 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003758:	4b5b      	ldr	r3, [pc, #364]	; (80038c8 <pvPortMalloc+0x180>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003760:	f000 f920 	bl	80039a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003764:	4b59      	ldr	r3, [pc, #356]	; (80038cc <pvPortMalloc+0x184>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	f040 8093 	bne.w	8003898 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01d      	beq.n	80037b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003778:	2208      	movs	r2, #8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	2b00      	cmp	r3, #0
 8003788:	d014      	beq.n	80037b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f023 0307 	bic.w	r3, r3, #7
 8003790:	3308      	adds	r3, #8
 8003792:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <pvPortMalloc+0x6c>
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	617b      	str	r3, [r7, #20]
}
 80037b0:	bf00      	nop
 80037b2:	e7fe      	b.n	80037b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d06e      	beq.n	8003898 <pvPortMalloc+0x150>
 80037ba:	4b45      	ldr	r3, [pc, #276]	; (80038d0 <pvPortMalloc+0x188>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d869      	bhi.n	8003898 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80037c4:	4b43      	ldr	r3, [pc, #268]	; (80038d4 <pvPortMalloc+0x18c>)
 80037c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <pvPortMalloc+0x18c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037ce:	e004      	b.n	80037da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d903      	bls.n	80037ec <pvPortMalloc+0xa4>
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f1      	bne.n	80037d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80037ec:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <pvPortMalloc+0x180>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d050      	beq.n	8003898 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2208      	movs	r2, #8
 80037fc:	4413      	add	r3, r2
 80037fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	1ad2      	subs	r2, r2, r3
 8003810:	2308      	movs	r3, #8
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	429a      	cmp	r2, r3
 8003816:	d91f      	bls.n	8003858 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <pvPortMalloc+0xf8>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	613b      	str	r3, [r7, #16]
}
 800383c:	bf00      	nop
 800383e:	e7fe      	b.n	800383e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	1ad2      	subs	r2, r2, r3
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003852:	69b8      	ldr	r0, [r7, #24]
 8003854:	f000 f908 	bl	8003a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003858:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <pvPortMalloc+0x188>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	4a1b      	ldr	r2, [pc, #108]	; (80038d0 <pvPortMalloc+0x188>)
 8003864:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003866:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <pvPortMalloc+0x188>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <pvPortMalloc+0x190>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d203      	bcs.n	800387a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003872:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <pvPortMalloc+0x188>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a18      	ldr	r2, [pc, #96]	; (80038d8 <pvPortMalloc+0x190>)
 8003878:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <pvPortMalloc+0x184>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	431a      	orrs	r2, r3
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800388e:	4b13      	ldr	r3, [pc, #76]	; (80038dc <pvPortMalloc+0x194>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3301      	adds	r3, #1
 8003894:	4a11      	ldr	r2, [pc, #68]	; (80038dc <pvPortMalloc+0x194>)
 8003896:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003898:	f7fe ff52 	bl	8002740 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <pvPortMalloc+0x174>
	__asm volatile
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	60fb      	str	r3, [r7, #12]
}
 80038b8:	bf00      	nop
 80038ba:	e7fe      	b.n	80038ba <pvPortMalloc+0x172>
	return pvReturn;
 80038bc:	69fb      	ldr	r3, [r7, #28]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3728      	adds	r7, #40	; 0x28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20003fcc 	.word	0x20003fcc
 80038cc:	20003fe0 	.word	0x20003fe0
 80038d0:	20003fd0 	.word	0x20003fd0
 80038d4:	20003fc4 	.word	0x20003fc4
 80038d8:	20003fd4 	.word	0x20003fd4
 80038dc:	20003fd8 	.word	0x20003fd8

080038e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d04d      	beq.n	800398e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80038f2:	2308      	movs	r3, #8
 80038f4:	425b      	negs	r3, r3
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4413      	add	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	4b24      	ldr	r3, [pc, #144]	; (8003998 <vPortFree+0xb8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10a      	bne.n	8003924 <vPortFree+0x44>
	__asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	60fb      	str	r3, [r7, #12]
}
 8003920:	bf00      	nop
 8003922:	e7fe      	b.n	8003922 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <vPortFree+0x62>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	60bb      	str	r3, [r7, #8]
}
 800393e:	bf00      	nop
 8003940:	e7fe      	b.n	8003940 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	4b14      	ldr	r3, [pc, #80]	; (8003998 <vPortFree+0xb8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01e      	beq.n	800398e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d11a      	bne.n	800398e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <vPortFree+0xb8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	43db      	mvns	r3, r3
 8003962:	401a      	ands	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003968:	f7fe fedc 	bl	8002724 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <vPortFree+0xbc>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4413      	add	r3, r2
 8003976:	4a09      	ldr	r2, [pc, #36]	; (800399c <vPortFree+0xbc>)
 8003978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800397a:	6938      	ldr	r0, [r7, #16]
 800397c:	f000 f874 	bl	8003a68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <vPortFree+0xc0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3301      	adds	r3, #1
 8003986:	4a06      	ldr	r2, [pc, #24]	; (80039a0 <vPortFree+0xc0>)
 8003988:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800398a:	f7fe fed9 	bl	8002740 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20003fe0 	.word	0x20003fe0
 800399c:	20003fd0 	.word	0x20003fd0
 80039a0:	20003fdc 	.word	0x20003fdc

080039a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80039ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80039b0:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <prvHeapInit+0xac>)
 80039b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00c      	beq.n	80039d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3307      	adds	r3, #7
 80039c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0307 	bic.w	r3, r3, #7
 80039ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <prvHeapInit+0xac>)
 80039d4:	4413      	add	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039dc:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <prvHeapInit+0xb0>)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80039e2:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <prvHeapInit+0xb0>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80039f0:	2208      	movs	r2, #8
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0307 	bic.w	r3, r3, #7
 80039fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <prvHeapInit+0xb4>)
 8003a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a06:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <prvHeapInit+0xb4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <prvHeapInit+0xb4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	1ad2      	subs	r2, r2, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <prvHeapInit+0xb4>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <prvHeapInit+0xb8>)
 8003a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <prvHeapInit+0xbc>)
 8003a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <prvHeapInit+0xc0>)
 8003a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a42:	601a      	str	r2, [r3, #0]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	200003c4 	.word	0x200003c4
 8003a54:	20003fc4 	.word	0x20003fc4
 8003a58:	20003fcc 	.word	0x20003fcc
 8003a5c:	20003fd4 	.word	0x20003fd4
 8003a60:	20003fd0 	.word	0x20003fd0
 8003a64:	20003fe0 	.word	0x20003fe0

08003a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a70:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <prvInsertBlockIntoFreeList+0xac>)
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e002      	b.n	8003a7c <prvInsertBlockIntoFreeList+0x14>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d8f7      	bhi.n	8003a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	4413      	add	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d108      	bne.n	8003aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	441a      	add	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	441a      	add	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d118      	bne.n	8003af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <prvInsertBlockIntoFreeList+0xb0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d00d      	beq.n	8003ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	441a      	add	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e008      	b.n	8003af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <prvInsertBlockIntoFreeList+0xb0>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e003      	b.n	8003af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d002      	beq.n	8003b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20003fc4 	.word	0x20003fc4
 8003b18:	20003fcc 	.word	0x20003fcc

08003b1c <memset>:
 8003b1c:	4402      	add	r2, r0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d100      	bne.n	8003b26 <memset+0xa>
 8003b24:	4770      	bx	lr
 8003b26:	f803 1b01 	strb.w	r1, [r3], #1
 8003b2a:	e7f9      	b.n	8003b20 <memset+0x4>

08003b2c <__libc_init_array>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	4d0d      	ldr	r5, [pc, #52]	; (8003b64 <__libc_init_array+0x38>)
 8003b30:	4c0d      	ldr	r4, [pc, #52]	; (8003b68 <__libc_init_array+0x3c>)
 8003b32:	1b64      	subs	r4, r4, r5
 8003b34:	10a4      	asrs	r4, r4, #2
 8003b36:	2600      	movs	r6, #0
 8003b38:	42a6      	cmp	r6, r4
 8003b3a:	d109      	bne.n	8003b50 <__libc_init_array+0x24>
 8003b3c:	4d0b      	ldr	r5, [pc, #44]	; (8003b6c <__libc_init_array+0x40>)
 8003b3e:	4c0c      	ldr	r4, [pc, #48]	; (8003b70 <__libc_init_array+0x44>)
 8003b40:	f000 f826 	bl	8003b90 <_init>
 8003b44:	1b64      	subs	r4, r4, r5
 8003b46:	10a4      	asrs	r4, r4, #2
 8003b48:	2600      	movs	r6, #0
 8003b4a:	42a6      	cmp	r6, r4
 8003b4c:	d105      	bne.n	8003b5a <__libc_init_array+0x2e>
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}
 8003b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b54:	4798      	blx	r3
 8003b56:	3601      	adds	r6, #1
 8003b58:	e7ee      	b.n	8003b38 <__libc_init_array+0xc>
 8003b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5e:	4798      	blx	r3
 8003b60:	3601      	adds	r6, #1
 8003b62:	e7f2      	b.n	8003b4a <__libc_init_array+0x1e>
 8003b64:	08003c10 	.word	0x08003c10
 8003b68:	08003c10 	.word	0x08003c10
 8003b6c:	08003c10 	.word	0x08003c10
 8003b70:	08003c14 	.word	0x08003c14

08003b74 <memcpy>:
 8003b74:	440a      	add	r2, r1
 8003b76:	4291      	cmp	r1, r2
 8003b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b7c:	d100      	bne.n	8003b80 <memcpy+0xc>
 8003b7e:	4770      	bx	lr
 8003b80:	b510      	push	{r4, lr}
 8003b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b8a:	4291      	cmp	r1, r2
 8003b8c:	d1f9      	bne.n	8003b82 <memcpy+0xe>
 8003b8e:	bd10      	pop	{r4, pc}

08003b90 <_init>:
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	bf00      	nop
 8003b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b96:	bc08      	pop	{r3}
 8003b98:	469e      	mov	lr, r3
 8003b9a:	4770      	bx	lr

08003b9c <_fini>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	bf00      	nop
 8003ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba2:	bc08      	pop	{r3}
 8003ba4:	469e      	mov	lr, r3
 8003ba6:	4770      	bx	lr
